
LED_Matrix_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a5  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075b  00000000  00000000  00000c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032e  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001698  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040e  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e9  00000000  00000000  00001b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001cef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 92 00 	call	0x124	; 0x124 <main>
  8e:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <spi_transfer>:
	spi_transfer(0x0C01);			//turn on the matrix
}

void spi_transfer(uint16_t data)
{
	CLR_BIT(PORTB, CS_PIN);		// Select matrix
  96:	2a 98       	cbi	0x05, 2	; 5
	SPDR = data >> 8;			//start CMD transmission
  98:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)));	//wait transfer finish
  9a:	0d b4       	in	r0, 0x2d	; 45
  9c:	07 fe       	sbrs	r0, 7
  9e:	fd cf       	rjmp	.-6      	; 0x9a <spi_transfer+0x4>
	SPDR = data & 0xFF;			//start DATA transmission
  a0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	//wait transfer finish
  a2:	0d b4       	in	r0, 0x2d	; 45
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <spi_transfer+0xc>
	SET_BIT(PORTB, CS_PIN)		//terminate the packet by
  a8:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8f e9       	ldi	r24, 0x9F	; 159
  ac:	9f e0       	ldi	r25, 0x0F	; 15
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <spi_transfer+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <spi_transfer+0x1e>
  b4:	00 00       	nop
  b6:	08 95       	ret

000000b8 <spi_init>:
	while(1);
	return 0;
}

void spi_init(volatile uint8_t *DDR, uint8_t MOSI, uint8_t CLK, uint8_t CS)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
	*DDR = (1<<MOSI)|(1<<CLK)|(1<<CS);		//MOSI and SCK are output, CS to select matrix
  bc:	e1 e0       	ldi	r30, 0x01	; 1
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	df 01       	movw	r26, r30
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <spi_init+0x10>
  c4:	aa 0f       	add	r26, r26
  c6:	bb 1f       	adc	r27, r27
  c8:	4a 95       	dec	r20
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <spi_init+0xc>
  cc:	ad 01       	movw	r20, r26
  ce:	df 01       	movw	r26, r30
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <spi_init+0x1e>
  d2:	aa 0f       	add	r26, r26
  d4:	bb 1f       	adc	r27, r27
  d6:	2a 95       	dec	r18
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <spi_init+0x1a>
  da:	9d 01       	movw	r18, r26
  dc:	24 2b       	or	r18, r20
  de:	02 c0       	rjmp	.+4      	; 0xe4 <spi_init+0x2c>
  e0:	ee 0f       	add	r30, r30
  e2:	ff 1f       	adc	r31, r31
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <spi_init+0x28>
  e8:	e2 2b       	or	r30, r18
  ea:	dc 01       	movw	r26, r24
  ec:	ec 93       	st	X, r30
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	//enable SPI as master
  ee:	81 e5       	ldi	r24, 0x51	; 81
  f0:	8c bd       	out	0x2c, r24	; 44
	
	spi_transfer(0x0900);			//disable decoding for all segments
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	99 e0       	ldi	r25, 0x09	; 9
  f6:	0e 94 4b 00 	call	0x96	; 0x96 <spi_transfer>
	spi_transfer(0x0B07);			//scan 8 8-segments
  fa:	87 e0       	ldi	r24, 0x07	; 7
  fc:	9b e0       	ldi	r25, 0x0B	; 11
  fe:	0e 94 4b 00 	call	0x96	; 0x96 <spi_transfer>
	
	// Clear all digits
	for(uint16_t data = 0x0100; data <=0x0800; data += 0x0100){
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d1 e0       	ldi	r29, 0x01	; 1
		spi_transfer(data);
 106:	ce 01       	movw	r24, r28
 108:	0e 94 4b 00 	call	0x96	; 0x96 <spi_transfer>
	
	spi_transfer(0x0900);			//disable decoding for all segments
	spi_transfer(0x0B07);			//scan 8 8-segments
	
	// Clear all digits
	for(uint16_t data = 0x0100; data <=0x0800; data += 0x0100){
 10c:	d3 95       	inc	r29
 10e:	c1 15       	cp	r28, r1
 110:	b9 e0       	ldi	r27, 0x09	; 9
 112:	db 07       	cpc	r29, r27
 114:	c1 f7       	brne	.-16     	; 0x106 <spi_init+0x4e>
		spi_transfer(data);
	}
	
	spi_transfer(0x0C01);			//turn on the matrix
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	9c e0       	ldi	r25, 0x0C	; 12
 11a:	0e 94 4b 00 	call	0x96	; 0x96 <spi_transfer>
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <main>:
void spi_transfer(uint16_t data);
void setIntensity(uint8_t intensity);

int main(void)
{
	SET_BIT(PORTB, CS_PIN); // Don't select matrix until transmission
 124:	2a 9a       	sbi	0x05, 2	; 5
	spi_init(&DDRB, DIN_PIN, SCK_PIN, CS_PIN);	// Initialize serial output pins on PORTB
 126:	22 e0       	ldi	r18, 0x02	; 2
 128:	45 e0       	ldi	r20, 0x05	; 5
 12a:	63 e0       	ldi	r22, 0x03	; 3
 12c:	84 e2       	ldi	r24, 0x24	; 36
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 5c 00 	call	0xb8	; 0xb8 <spi_init>

void setIntensity(uint8_t intensity)
{
	if (intensity < 0 || intensity > 15)
	return;
	spi_transfer(0x0A00 | intensity);
 134:	8f e0       	ldi	r24, 0x0F	; 15
 136:	9a e0       	ldi	r25, 0x0A	; 10
 138:	0e 94 4b 00 	call	0x96	; 0x96 <spi_transfer>
{
	SET_BIT(PORTB, CS_PIN); // Don't select matrix until transmission
	spi_init(&DDRB, DIN_PIN, SCK_PIN, CS_PIN);	// Initialize serial output pins on PORTB
	setIntensity(15);
	
	for (uint16_t data = 0x0100; data <= 0x08FF; data++){
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d1 e0       	ldi	r29, 0x01	; 1
		spi_transfer(data);
 140:	ce 01       	movw	r24, r28
 142:	0e 94 4b 00 	call	0x96	; 0x96 <spi_transfer>
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	89 ef       	ldi	r24, 0xF9	; 249
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x28>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x32>
 156:	00 00       	nop
{
	SET_BIT(PORTB, CS_PIN); // Don't select matrix until transmission
	spi_init(&DDRB, DIN_PIN, SCK_PIN, CS_PIN);	// Initialize serial output pins on PORTB
	setIntensity(15);
	
	for (uint16_t data = 0x0100; data <= 0x08FF; data++){
 158:	21 96       	adiw	r28, 0x01	; 1
 15a:	c1 15       	cp	r28, r1
 15c:	29 e0       	ldi	r18, 0x09	; 9
 15e:	d2 07       	cpc	r29, r18
 160:	79 f7       	brne	.-34     	; 0x140 <main+0x1c>
		spi_transfer(data);
		_delay_ms(20);
	}

	SET_BIT(DDRB, 0);	// Signal program is done
 162:	20 9a       	sbi	0x04, 0	; 4
	SET_BIT(PORTB, 0); 
 164:	28 9a       	sbi	0x05, 0	; 5
 166:	ff cf       	rjmp	.-2      	; 0x166 <main+0x42>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
