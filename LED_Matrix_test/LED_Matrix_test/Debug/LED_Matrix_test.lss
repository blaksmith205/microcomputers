
LED_Matrix_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095d  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ee  00000000  00000000  00000bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034d  00000000  00000000  000012bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000407  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ad  00000000  00000000  00001a77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  78:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <spi_write>:
#define CS_PIN	2	// Set CS bit as bit 2 of PORTB (pin 10)

uint8_t spi_write(char data)
{
	// Start transmission
	SPDR = data;
  80:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission to complete. SPIF = spi flag (bit 7)
	while(!(SPSR & (1 << SPIF)));
  82:	0d b4       	in	r0, 0x2d	; 45
  84:	07 fe       	sbrs	r0, 7
  86:	fd cf       	rjmp	.-6      	; 0x82 <spi_write+0x2>
	return SPDR;
  88:	8e b5       	in	r24, 0x2e	; 46
}
  8a:	08 95       	ret

0000008c <spi_write_int>:

void spi_write_int(int data){
  8c:	cf 93       	push	r28
  8e:	c8 2f       	mov	r28, r24
	CLR_BIT(PORTB, CS_PIN); // Select the matrix
  90:	2a 98       	cbi	0x05, 2	; 5
	spi_write(data >> 8); // Write higher bits
  92:	89 2f       	mov	r24, r25
  94:	0e 94 40 00 	call	0x80	; 0x80 <spi_write>
	spi_write(data & 0xFF); // Write lower bits
  98:	8c 2f       	mov	r24, r28
  9a:	0e 94 40 00 	call	0x80	; 0x80 <spi_write>
	SET_BIT(PORTB, CS_PIN); // De-select the matrix
  9e:	2a 9a       	sbi	0x05, 2	; 5
}
  a0:	cf 91       	pop	r28
  a2:	08 95       	ret

000000a4 <spi_init>:

void spi_init(uint8_t mosi_bit, uint8_t clk_bit, uint8_t cs_bit)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
	// Set MOSI, SCK output, and CS as output, all others input
	SPI_DDR = (1 << mosi_bit) | (1 << clk_bit) | (1 << cs_bit);
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	f9 01       	movw	r30, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <spi_init+0x10>
  b0:	ee 0f       	add	r30, r30
  b2:	ff 1f       	adc	r31, r31
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <spi_init+0xc>
  b8:	bf 01       	movw	r22, r30
  ba:	f9 01       	movw	r30, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <spi_init+0x1e>
  be:	ee 0f       	add	r30, r30
  c0:	ff 1f       	adc	r31, r31
  c2:	4a 95       	dec	r20
  c4:	e2 f7       	brpl	.-8      	; 0xbe <spi_init+0x1a>
  c6:	af 01       	movw	r20, r30
  c8:	46 2b       	or	r20, r22
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <spi_init+0x2c>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	8a 95       	dec	r24
  d2:	e2 f7       	brpl	.-8      	; 0xcc <spi_init+0x28>
  d4:	24 2b       	or	r18, r20
  d6:	24 b9       	out	0x04, r18	; 4
	// Enable SPI, Master, set clock to high when idle, set clock rate F_CPU/16 or 1MHz, and send MSB first (DORD 0 by default)
	SPCR = (1<<SPIF) | (1 << SPE) | (1 << MSTR) | (1 << SPR0);
  d8:	81 ed       	ldi	r24, 0xD1	; 209
  da:	8c bd       	out	0x2c, r24	; 44
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	8f e3       	ldi	r24, 0x3F	; 63
  de:	9c e9       	ldi	r25, 0x9C	; 156
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <spi_init+0x3c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <spi_init+0x42>
  e6:	00 00       	nop
	_delay_ms(10); // Small delay for consistency
	// Get Matrix out of shutdown mode by sending 0xXCX1 from datasheet
	spi_write_int(0x0C01);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	9c e0       	ldi	r25, 0x0C	; 12
  ec:	0e 94 46 00 	call	0x8c	; 0x8c <spi_write_int>
  f0:	ef e3       	ldi	r30, 0x3F	; 63
  f2:	fc e9       	ldi	r31, 0x9C	; 156
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <spi_init+0x50>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <spi_init+0x56>
  fa:	00 00       	nop
	_delay_ms(10);
	// Set scan limit to all 8 digits (rows) by sending 0xXBX7 from datasheet
	spi_write_int(0x0B07);
  fc:	87 e0       	ldi	r24, 0x07	; 7
  fe:	9b e0       	ldi	r25, 0x0B	; 11
 100:	0e 94 46 00 	call	0x8c	; 0x8c <spi_write_int>
 104:	8f e3       	ldi	r24, 0x3F	; 63
 106:	9c e9       	ldi	r25, 0x9C	; 156
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <spi_init+0x64>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <spi_init+0x6a>
 10e:	00 00       	nop
	_delay_ms(10);
	// Clear all rows
	for(uint16_t data = 0x0100; data <= 0x0800; data+=0x0100){
 110:	c0 e0       	ldi	r28, 0x00	; 0
 112:	d1 e0       	ldi	r29, 0x01	; 1
		spi_write_int(data);
 114:	ce 01       	movw	r24, r28
 116:	0e 94 46 00 	call	0x8c	; 0x8c <spi_write_int>
 11a:	ef e3       	ldi	r30, 0x3F	; 63
 11c:	fc e9       	ldi	r31, 0x9C	; 156
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <spi_init+0x7a>
 122:	00 c0       	rjmp	.+0      	; 0x124 <spi_init+0x80>
 124:	00 00       	nop
	_delay_ms(10);
	// Set scan limit to all 8 digits (rows) by sending 0xXBX7 from datasheet
	spi_write_int(0x0B07);
	_delay_ms(10);
	// Clear all rows
	for(uint16_t data = 0x0100; data <= 0x0800; data+=0x0100){
 126:	d3 95       	inc	r29
 128:	c1 15       	cp	r28, r1
 12a:	f9 e0       	ldi	r31, 0x09	; 9
 12c:	df 07       	cpc	r29, r31
 12e:	91 f7       	brne	.-28     	; 0x114 <spi_init+0x70>
		spi_write_int(data);
		_delay_ms(10);
	}
}
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <main>:

int main(void)
{
	SET_BIT(PORTB, CS_PIN); // Don't select matrix until transmission
 136:	2a 9a       	sbi	0x05, 2	; 5
	spi_init(DIN_PIN, SCK_PIN, CS_PIN);	// Initialize serial output pins
 138:	42 e0       	ldi	r20, 0x02	; 2
 13a:	65 e0       	ldi	r22, 0x05	; 5
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	0e 94 52 00 	call	0xa4	; 0xa4 <spi_init>
	
	for (uint16_t data = 0x0100; data <= 0x08FF; data++){
 142:	c0 e0       	ldi	r28, 0x00	; 0
 144:	d1 e0       	ldi	r29, 0x01	; 1
		spi_write_int(data);
 146:	ce 01       	movw	r24, r28
 148:	0e 94 46 00 	call	0x8c	; 0x8c <spi_write_int>
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	89 ef       	ldi	r24, 0xF9	; 249
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x1c>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x26>
 15c:	00 00       	nop
int main(void)
{
	SET_BIT(PORTB, CS_PIN); // Don't select matrix until transmission
	spi_init(DIN_PIN, SCK_PIN, CS_PIN);	// Initialize serial output pins
	
	for (uint16_t data = 0x0100; data <= 0x08FF; data++){
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	c1 15       	cp	r28, r1
 162:	29 e0       	ldi	r18, 0x09	; 9
 164:	d2 07       	cpc	r29, r18
 166:	79 f7       	brne	.-34     	; 0x146 <main+0x10>
		spi_write_int(data);
		_delay_ms(20);
	}

	SET_BIT(DDRB, 0);	// Signal program is done
 168:	20 9a       	sbi	0x04, 0	; 4
	SET_BIT(PORTB, 0); 
 16a:	28 9a       	sbi	0x05, 0	; 5
 16c:	ff cf       	rjmp	.-2      	; 0x16c <main+0x36>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
