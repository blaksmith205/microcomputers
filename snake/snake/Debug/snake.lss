
snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000005ce  00000662  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800114  00800114  00000676  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000006e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a3  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a31  00000000  00000000  000019a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008e3  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00002cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051d  00000000  00000000  00002eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d3  00000000  00000000  000033d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003ba4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <spi_transfer>:
	Lower bound is inclusive, Upper bound is exclusive
*/
bool isBounded(uint8_t value, uint8_t lowerBound, uint8_t upperBound)
{
	return value >= lowerBound || value < upperBound;
}
  a6:	2a 98       	cbi	0x05, 2	; 5
  a8:	9e bd       	out	0x2e, r25	; 46
  aa:	0d b4       	in	r0, 0x2d	; 45
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <spi_transfer+0x4>
  b0:	8e bd       	out	0x2e, r24	; 46
  b2:	0d b4       	in	r0, 0x2d	; 45
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <spi_transfer+0xc>
  b8:	2a 9a       	sbi	0x05, 2	; 5
  ba:	89 ef       	ldi	r24, 0xF9	; 249
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <spi_transfer+0x18>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <spi_transfer+0x1e>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <setIntensity>:
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	9a 60       	ori	r25, 0x0A	; 10
  cc:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
  d0:	08 95       	ret

000000d2 <clearScreen>:
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	d1 e0       	ldi	r29, 0x01	; 1
  da:	ce 01       	movw	r24, r28
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
  e0:	d3 95       	inc	r29
  e2:	c1 15       	cp	r28, r1
  e4:	89 e0       	ldi	r24, 0x09	; 9
  e6:	d8 07       	cpc	r29, r24
  e8:	c1 f7       	brne	.-16     	; 0xda <clearScreen+0x8>
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <spi_init>:
  f0:	e1 e0       	ldi	r30, 0x01	; 1
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	df 01       	movw	r26, r30
  f6:	02 c0       	rjmp	.+4      	; 0xfc <spi_init+0xc>
  f8:	aa 0f       	add	r26, r26
  fa:	bb 1f       	adc	r27, r27
  fc:	4a 95       	dec	r20
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <spi_init+0x8>
 100:	ad 01       	movw	r20, r26
 102:	df 01       	movw	r26, r30
 104:	02 c0       	rjmp	.+4      	; 0x10a <spi_init+0x1a>
 106:	aa 0f       	add	r26, r26
 108:	bb 1f       	adc	r27, r27
 10a:	2a 95       	dec	r18
 10c:	e2 f7       	brpl	.-8      	; 0x106 <spi_init+0x16>
 10e:	9d 01       	movw	r18, r26
 110:	24 2b       	or	r18, r20
 112:	02 c0       	rjmp	.+4      	; 0x118 <spi_init+0x28>
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <spi_init+0x24>
 11c:	e2 2b       	or	r30, r18
 11e:	dc 01       	movw	r26, r24
 120:	ec 93       	st	X, r30
 122:	81 e5       	ldi	r24, 0x51	; 81
 124:	8c bd       	out	0x2c, r24	; 44
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	99 e0       	ldi	r25, 0x09	; 9
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 12e:	87 e0       	ldi	r24, 0x07	; 7
 130:	9b e0       	ldi	r25, 0x0B	; 11
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 136:	0e 94 69 00 	call	0xd2	; 0xd2 <clearScreen>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	9c e0       	ldi	r25, 0x0C	; 12
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 142:	08 95       	ret

00000144 <isBoardBounded>:

/* Convenience function for row and col bound checking */
bool isBoardBounded(uint8_t value)
{
	return isBounded(value, 0, BOARD_WIDTH);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	08 95       	ret

00000148 <setLED>:
	Sets the LED in desired cell
	row: 0 to 7; upper left is 0
	col: 0 to 7; upper left is 0
*/
void setLED(uint8_t row, uint8_t col, uint8_t state)
{
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	c8 2f       	mov	r28, r24
 156:	16 2f       	mov	r17, r22
 158:	04 2f       	mov	r16, r20
	if (!isBoardBounded(row) || !isBoardBounded(col)) 
 15a:	0e 94 a2 00 	call	0x144	; 0x144 <isBoardBounded>
 15e:	88 23       	and	r24, r24
 160:	91 f1       	breq	.+100    	; 0x1c6 <setLED+0x7e>
 162:	81 2f       	mov	r24, r17
 164:	0e 94 a2 00 	call	0x144	; 0x144 <isBoardBounded>
 168:	88 23       	and	r24, r24
 16a:	69 f1       	breq	.+90     	; 0x1c6 <setLED+0x7e>
		return;
	
	uint16_t data = ROWS[row];
 16c:	d0 e0       	ldi	r29, 0x00	; 0
 16e:	fe 01       	movw	r30, r28
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	ec 5f       	subi	r30, 0xFC	; 252
 176:	fe 4f       	sbci	r31, 0xFE	; 254
 178:	e0 80       	ld	r14, Z
 17a:	f1 80       	ldd	r15, Z+1	; 0x01
	
	// Turn off the cell
	if (state == LOW){
 17c:	01 11       	cpse	r16, r1
 17e:	0f c0       	rjmp	.+30     	; 0x19e <setLED+0x56>
		CLR_BIT(data, col);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <setLED+0x42>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	1a 95       	dec	r17
 18c:	e2 f7       	brpl	.-8      	; 0x186 <setLED+0x3e>
 18e:	80 95       	com	r24
 190:	90 95       	com	r25
 192:	e8 22       	and	r14, r24
 194:	f9 22       	and	r15, r25
		spi_transfer(data);
 196:	c7 01       	movw	r24, r14
 198:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 19c:	0e c0       	rjmp	.+28     	; 0x1ba <setLED+0x72>
	}
	// Turn on the cell
	if (state == HIGH){
 19e:	01 30       	cpi	r16, 0x01	; 1
 1a0:	61 f4       	brne	.+24     	; 0x1ba <setLED+0x72>
		SET_BIT(data, col);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <setLED+0x64>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	1a 95       	dec	r17
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <setLED+0x60>
 1b0:	e8 2a       	or	r14, r24
 1b2:	f9 2a       	or	r15, r25
		spi_transfer(data);
 1b4:	c7 01       	movw	r24, r14
 1b6:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
	}
	ROWS[row] = data;
 1ba:	cc 0f       	add	r28, r28
 1bc:	dd 1f       	adc	r29, r29
 1be:	cc 5f       	subi	r28, 0xFC	; 252
 1c0:	de 4f       	sbci	r29, 0xFE	; 254
 1c2:	f9 82       	std	Y+1, r15	; 0x01
 1c4:	e8 82       	st	Y, r14
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	08 95       	ret

000001d4 <setup>:
}

void setup()
{
	// Setup matrix
	SET_BIT(PORTB, CS_PIN); // Don't select matrix until transmission
 1d4:	2a 9a       	sbi	0x05, 2	; 5
	spi_init(&DDRB, DIN_PIN, SCK_PIN, CS_PIN);	// Initialize serial output pins on PORTB
 1d6:	22 e0       	ldi	r18, 0x02	; 2
 1d8:	45 e0       	ldi	r20, 0x05	; 5
 1da:	63 e0       	ldi	r22, 0x03	; 3
 1dc:	84 e2       	ldi	r24, 0x24	; 36
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 78 00 	call	0xf0	; 0xf0 <spi_init>
	setIntensity(15);
 1e4:	8f e0       	ldi	r24, 0x0F	; 15
 1e6:	0e 94 64 00 	call	0xc8	; 0xc8 <setIntensity>
	
	// Setup random generator
	randomInit();
 1ea:	0e 94 d5 01 	call	0x3aa	; 0x3aa <randomInit>
	
	// Place the first food
	placeFood();
 1ee:	0e 94 bb 01 	call	0x376	; 0x376 <placeFood>
 1f2:	08 95       	ret

000001f4 <main>:

void setup();

int main(void)
{
    setup();
 1f4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <setup>
    SET_BIT(DDRB, 0);	// Signal program is done
 1f8:	20 9a       	sbi	0x04, 0	; 4
    SET_BIT(PORTB, 0);
 1fa:	28 9a       	sbi	0x05, 0	; 5
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <main+0x8>

000001fe <isAvailable>:
	*_col = -1;
}

/* Check if the row,col is available */
bool isAvailable(uint8_t row, uint8_t col)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	c8 2f       	mov	r28, r24
 204:	d6 2f       	mov	r29, r22
	// Check range of row and col
	if (isBoardBounded(row) && isBoardBounded(col)){
 206:	0e 94 a2 00 	call	0x144	; 0x144 <isBoardBounded>
 20a:	88 23       	and	r24, r24
 20c:	a9 f0       	breq	.+42     	; 0x238 <isAvailable+0x3a>
 20e:	8d 2f       	mov	r24, r29
 210:	0e 94 a2 00 	call	0x144	; 0x144 <isBoardBounded>
 214:	88 23       	and	r24, r24
 216:	81 f0       	breq	.+32     	; 0x238 <isAvailable+0x3a>
		// Check if the board doesn't have an apple or snake segment
		return board[row][col] == 0;
 218:	ec 2f       	mov	r30, r28
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	ee 0f       	add	r30, r30
 21e:	ff 1f       	adc	r31, r31
 220:	ee 0f       	add	r30, r30
 222:	ff 1f       	adc	r31, r31
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	ec 5e       	subi	r30, 0xEC	; 236
 22a:	fe 4f       	sbci	r31, 0xFE	; 254
 22c:	ed 0f       	add	r30, r29
 22e:	f1 1d       	adc	r31, r1
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 81       	ld	r25, Z
 234:	91 11       	cpse	r25, r1
 236:	80 e0       	ldi	r24, 0x00	; 0
	}
	else{
		return false;
	}
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <getAvailablePosition>:
	If position can't be randomly determined 8 times, will set the row and col
	to the first available location on the board. If no available location, 
	row and col are set to -1
*/
void getAvailablePosition(int8_t *_row, int8_t *_col)
{
 23e:	cf 92       	push	r12
 240:	df 92       	push	r13
 242:	ef 92       	push	r14
 244:	ff 92       	push	r15
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	7c 01       	movw	r14, r24
 250:	8b 01       	movw	r16, r22
	int8_t row = rand() % BOARD_WIDTH;
 252:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <rand>
 256:	87 70       	andi	r24, 0x07	; 7
 258:	90 78       	andi	r25, 0x80	; 128
 25a:	99 23       	and	r25, r25
 25c:	24 f4       	brge	.+8      	; 0x266 <getAvailablePosition+0x28>
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	88 6f       	ori	r24, 0xF8	; 248
 262:	9f 6f       	ori	r25, 0xFF	; 255
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	d8 2f       	mov	r29, r24
	int8_t col = rand() % BOARD_WIDTH;
 268:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <rand>
 26c:	87 70       	andi	r24, 0x07	; 7
 26e:	90 78       	andi	r25, 0x80	; 128
 270:	99 23       	and	r25, r25
 272:	24 f4       	brge	.+8      	; 0x27c <getAvailablePosition+0x3e>
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	88 6f       	ori	r24, 0xF8	; 248
 278:	9f 6f       	ori	r25, 0xFF	; 255
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	c8 2f       	mov	r28, r24
 27e:	0f 2e       	mov	r0, r31
 280:	f7 e0       	ldi	r31, 0x07	; 7
 282:	df 2e       	mov	r13, r31
 284:	f0 2d       	mov	r31, r0
	
	// Keeps looking for available row and col
	for (uint8_t i = 1; i < 8; i++){
		if (isAvailable(row,col)){
 286:	6c 2f       	mov	r22, r28
 288:	8d 2f       	mov	r24, r29
 28a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <isAvailable>
 28e:	88 23       	and	r24, r24
 290:	29 f0       	breq	.+10     	; 0x29c <getAvailablePosition+0x5e>
			// Update pointers
			*_row = row;
 292:	f7 01       	movw	r30, r14
 294:	d0 83       	st	Z, r29
			*_col = col;
 296:	f8 01       	movw	r30, r16
 298:	c0 83       	st	Z, r28
			return;
 29a:	37 c0       	rjmp	.+110    	; 0x30a <getAvailablePosition+0xcc>
		}
		else{
			// Update position
			row = rand() % BOARD_WIDTH;
 29c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <rand>
 2a0:	87 70       	andi	r24, 0x07	; 7
 2a2:	90 78       	andi	r25, 0x80	; 128
 2a4:	99 23       	and	r25, r25
 2a6:	24 f4       	brge	.+8      	; 0x2b0 <getAvailablePosition+0x72>
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	88 6f       	ori	r24, 0xF8	; 248
 2ac:	9f 6f       	ori	r25, 0xFF	; 255
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	d8 2f       	mov	r29, r24
			col = rand() % BOARD_WIDTH;
 2b2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <rand>
 2b6:	87 70       	andi	r24, 0x07	; 7
 2b8:	90 78       	andi	r25, 0x80	; 128
 2ba:	99 23       	and	r25, r25
 2bc:	24 f4       	brge	.+8      	; 0x2c6 <getAvailablePosition+0x88>
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	88 6f       	ori	r24, 0xF8	; 248
 2c2:	9f 6f       	ori	r25, 0xFF	; 255
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	c8 2f       	mov	r28, r24
 2c8:	da 94       	dec	r13
{
	int8_t row = rand() % BOARD_WIDTH;
	int8_t col = rand() % BOARD_WIDTH;
	
	// Keeps looking for available row and col
	for (uint8_t i = 1; i < 8; i++){
 2ca:	d1 10       	cpse	r13, r1
 2cc:	dc cf       	rjmp	.-72     	; 0x286 <getAvailablePosition+0x48>
 2ce:	c1 2c       	mov	r12, r1
 2d0:	14 c0       	rjmp	.+40     	; 0x2fa <getAvailablePosition+0xbc>
	
	// Available random location wasn't found
	// Search for first free location
	for (int8_t row = 0; row < BOARD_WIDTH; row++){
		for (int8_t col = 0; col < BOARD_WIDTH; col++){
			if (isAvailable(row, col)){
 2d2:	6c 2f       	mov	r22, r28
 2d4:	8d 2f       	mov	r24, r29
 2d6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <isAvailable>
 2da:	88 23       	and	r24, r24
 2dc:	29 f0       	breq	.+10     	; 0x2e8 <getAvailablePosition+0xaa>
				// Update pointers
				*_row = row;
 2de:	f7 01       	movw	r30, r14
 2e0:	c0 82       	st	Z, r12
				*_col = col;
 2e2:	f8 01       	movw	r30, r16
 2e4:	c0 83       	st	Z, r28
				return;	
 2e6:	11 c0       	rjmp	.+34     	; 0x30a <getAvailablePosition+0xcc>
 2e8:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	// Available random location wasn't found
	// Search for first free location
	for (int8_t row = 0; row < BOARD_WIDTH; row++){
		for (int8_t col = 0; col < BOARD_WIDTH; col++){
 2ea:	c8 30       	cpi	r28, 0x08	; 8
 2ec:	91 f7       	brne	.-28     	; 0x2d2 <getAvailablePosition+0x94>
 2ee:	cc 24       	eor	r12, r12
 2f0:	c3 94       	inc	r12
 2f2:	cd 0e       	add	r12, r29
		}
	}
	
	// Available random location wasn't found
	// Search for first free location
	for (int8_t row = 0; row < BOARD_WIDTH; row++){
 2f4:	f8 e0       	ldi	r31, 0x08	; 8
 2f6:	cf 16       	cp	r12, r31
 2f8:	19 f0       	breq	.+6      	; 0x300 <getAvailablePosition+0xc2>
	row and col are set to -1
*/
void getAvailablePosition(int8_t *_row, int8_t *_col)
{
	int8_t row = rand() % BOARD_WIDTH;
	int8_t col = rand() % BOARD_WIDTH;
 2fa:	c0 e0       	ldi	r28, 0x00	; 0
	
	// Available random location wasn't found
	// Search for first free location
	for (int8_t row = 0; row < BOARD_WIDTH; row++){
		for (int8_t col = 0; col < BOARD_WIDTH; col++){
			if (isAvailable(row, col)){
 2fc:	dc 2d       	mov	r29, r12
 2fe:	e9 cf       	rjmp	.-46     	; 0x2d2 <getAvailablePosition+0x94>
			}
		}
	}
	
	// No location was found. Set position to -1
	*_row = -1;
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	f7 01       	movw	r30, r14
 304:	80 83       	st	Z, r24
	*_col = -1;
 306:	f8 01       	movw	r30, r16
 308:	80 83       	st	Z, r24
}
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	ff 90       	pop	r15
 314:	ef 90       	pop	r14
 316:	df 90       	pop	r13
 318:	cf 90       	pop	r12
 31a:	08 95       	ret

0000031c <updateBoard>:
	}
}


void updateBoard(uint8_t row, uint8_t col, uint8_t value)
{
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	c8 2f       	mov	r28, r24
 324:	d6 2f       	mov	r29, r22
 326:	14 2f       	mov	r17, r20
	if (!isBoardBounded(row) || !isBoardBounded(col))
 328:	0e 94 a2 00 	call	0x144	; 0x144 <isBoardBounded>
 32c:	88 23       	and	r24, r24
 32e:	f9 f0       	breq	.+62     	; 0x36e <updateBoard+0x52>
 330:	8d 2f       	mov	r24, r29
 332:	0e 94 a2 00 	call	0x144	; 0x144 <isBoardBounded>
 336:	88 23       	and	r24, r24
 338:	d1 f0       	breq	.+52     	; 0x36e <updateBoard+0x52>
		return;
		
	board[row][col] = value;
 33a:	ec 2f       	mov	r30, r28
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	ee 0f       	add	r30, r30
 340:	ff 1f       	adc	r31, r31
 342:	ee 0f       	add	r30, r30
 344:	ff 1f       	adc	r31, r31
 346:	ee 0f       	add	r30, r30
 348:	ff 1f       	adc	r31, r31
 34a:	ec 5e       	subi	r30, 0xEC	; 236
 34c:	fe 4f       	sbci	r31, 0xFE	; 254
 34e:	ed 0f       	add	r30, r29
 350:	f1 1d       	adc	r31, r1
 352:	10 83       	st	Z, r17
	if (value != LOW){
 354:	11 23       	and	r17, r17
 356:	31 f0       	breq	.+12     	; 0x364 <updateBoard+0x48>
		setLED(row, col, HIGH);
 358:	41 e0       	ldi	r20, 0x01	; 1
 35a:	6d 2f       	mov	r22, r29
 35c:	8c 2f       	mov	r24, r28
 35e:	0e 94 a4 00 	call	0x148	; 0x148 <setLED>
 362:	05 c0       	rjmp	.+10     	; 0x36e <updateBoard+0x52>
	}
	else {
		setLED(row, col, LOW);
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	6d 2f       	mov	r22, r29
 368:	8c 2f       	mov	r24, r28
 36a:	0e 94 a4 00 	call	0x148	; 0x148 <setLED>
	}
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	08 95       	ret

00000376 <placeFood>:
		return false;
	}
}

void placeFood()
{
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	00 d0       	rcall	.+0      	; 0x37c <placeFood+0x6>
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
	int8_t food_row;
	int8_t food_col;
	getAvailablePosition(&food_row, &food_col);
 380:	be 01       	movw	r22, r28
 382:	6e 5f       	subi	r22, 0xFE	; 254
 384:	7f 4f       	sbci	r23, 0xFF	; 255
 386:	ce 01       	movw	r24, r28
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	0e 94 1f 01 	call	0x23e	; 0x23e <getAvailablePosition>
	if (food_row != -1 && food_col != -1){
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	8f 3f       	cpi	r24, 0xFF	; 255
 392:	31 f0       	breq	.+12     	; 0x3a0 <placeFood+0x2a>
 394:	6a 81       	ldd	r22, Y+2	; 0x02
 396:	6f 3f       	cpi	r22, 0xFF	; 255
 398:	19 f0       	breq	.+6      	; 0x3a0 <placeFood+0x2a>
		updateBoard(food_row, food_col, HIGH);
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	0e 94 8e 01 	call	0x31c	; 0x31c <updateBoard>
	}
	else{
		endGame();
	}
}
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <randomInit>:

/* Initialize random to be random enough for game play */
void randomInit()
{
	// Obtain value from EEPROM
	uint8_t seed = eeprom_read_byte((uint8_t*)0x66); 
 3aa:	86 e6       	ldi	r24, 0x66	; 102
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <eeprom_read_byte>
	// Set the random seed
	srand(seed);
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <srand>
	// Obtain random char value
	seed = rand() % 255;
 3b8:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <rand>
	// Store seed for future use
	eeprom_write_byte((uint8_t*)0x66, seed);
 3bc:	6f ef       	ldi	r22, 0xFF	; 255
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__divmodhi4>
 3c4:	68 2f       	mov	r22, r24
 3c6:	86 e6       	ldi	r24, 0x66	; 102
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 74 02 	call	0x4e8	; 0x4e8 <eeprom_write_byte>
 3ce:	08 95       	ret

000003d0 <__divmodhi4>:
 3d0:	97 fb       	bst	r25, 7
 3d2:	07 2e       	mov	r0, r23
 3d4:	16 f4       	brtc	.+4      	; 0x3da <__divmodhi4+0xa>
 3d6:	00 94       	com	r0
 3d8:	07 d0       	rcall	.+14     	; 0x3e8 <__divmodhi4_neg1>
 3da:	77 fd       	sbrc	r23, 7
 3dc:	09 d0       	rcall	.+18     	; 0x3f0 <__divmodhi4_neg2>
 3de:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__udivmodhi4>
 3e2:	07 fc       	sbrc	r0, 7
 3e4:	05 d0       	rcall	.+10     	; 0x3f0 <__divmodhi4_neg2>
 3e6:	3e f4       	brtc	.+14     	; 0x3f6 <__divmodhi4_exit>

000003e8 <__divmodhi4_neg1>:
 3e8:	90 95       	com	r25
 3ea:	81 95       	neg	r24
 3ec:	9f 4f       	sbci	r25, 0xFF	; 255
 3ee:	08 95       	ret

000003f0 <__divmodhi4_neg2>:
 3f0:	70 95       	com	r23
 3f2:	61 95       	neg	r22
 3f4:	7f 4f       	sbci	r23, 0xFF	; 255

000003f6 <__divmodhi4_exit>:
 3f6:	08 95       	ret

000003f8 <__udivmodhi4>:
 3f8:	aa 1b       	sub	r26, r26
 3fa:	bb 1b       	sub	r27, r27
 3fc:	51 e1       	ldi	r21, 0x11	; 17
 3fe:	07 c0       	rjmp	.+14     	; 0x40e <__udivmodhi4_ep>

00000400 <__udivmodhi4_loop>:
 400:	aa 1f       	adc	r26, r26
 402:	bb 1f       	adc	r27, r27
 404:	a6 17       	cp	r26, r22
 406:	b7 07       	cpc	r27, r23
 408:	10 f0       	brcs	.+4      	; 0x40e <__udivmodhi4_ep>
 40a:	a6 1b       	sub	r26, r22
 40c:	b7 0b       	sbc	r27, r23

0000040e <__udivmodhi4_ep>:
 40e:	88 1f       	adc	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	5a 95       	dec	r21
 414:	a9 f7       	brne	.-22     	; 0x400 <__udivmodhi4_loop>
 416:	80 95       	com	r24
 418:	90 95       	com	r25
 41a:	bc 01       	movw	r22, r24
 41c:	cd 01       	movw	r24, r26
 41e:	08 95       	ret

00000420 <do_rand>:
 420:	8f 92       	push	r8
 422:	9f 92       	push	r9
 424:	af 92       	push	r10
 426:	bf 92       	push	r11
 428:	cf 92       	push	r12
 42a:	df 92       	push	r13
 42c:	ef 92       	push	r14
 42e:	ff 92       	push	r15
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	ec 01       	movw	r28, r24
 436:	68 81       	ld	r22, Y
 438:	79 81       	ldd	r23, Y+1	; 0x01
 43a:	8a 81       	ldd	r24, Y+2	; 0x02
 43c:	9b 81       	ldd	r25, Y+3	; 0x03
 43e:	61 15       	cp	r22, r1
 440:	71 05       	cpc	r23, r1
 442:	81 05       	cpc	r24, r1
 444:	91 05       	cpc	r25, r1
 446:	21 f4       	brne	.+8      	; 0x450 <do_rand+0x30>
 448:	64 e2       	ldi	r22, 0x24	; 36
 44a:	79 ed       	ldi	r23, 0xD9	; 217
 44c:	8b e5       	ldi	r24, 0x5B	; 91
 44e:	97 e0       	ldi	r25, 0x07	; 7
 450:	2d e1       	ldi	r18, 0x1D	; 29
 452:	33 ef       	ldi	r19, 0xF3	; 243
 454:	41 e0       	ldi	r20, 0x01	; 1
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	0e 94 82 02 	call	0x504	; 0x504 <__divmodsi4>
 45c:	49 01       	movw	r8, r18
 45e:	5a 01       	movw	r10, r20
 460:	9b 01       	movw	r18, r22
 462:	ac 01       	movw	r20, r24
 464:	a7 ea       	ldi	r26, 0xA7	; 167
 466:	b1 e4       	ldi	r27, 0x41	; 65
 468:	0e 94 a1 02 	call	0x542	; 0x542 <__muluhisi3>
 46c:	6b 01       	movw	r12, r22
 46e:	7c 01       	movw	r14, r24
 470:	ac ee       	ldi	r26, 0xEC	; 236
 472:	b4 ef       	ldi	r27, 0xF4	; 244
 474:	a5 01       	movw	r20, r10
 476:	94 01       	movw	r18, r8
 478:	0e 94 af 02 	call	0x55e	; 0x55e <__mulohisi3>
 47c:	dc 01       	movw	r26, r24
 47e:	cb 01       	movw	r24, r22
 480:	8c 0d       	add	r24, r12
 482:	9d 1d       	adc	r25, r13
 484:	ae 1d       	adc	r26, r14
 486:	bf 1d       	adc	r27, r15
 488:	b7 ff       	sbrs	r27, 7
 48a:	03 c0       	rjmp	.+6      	; 0x492 <do_rand+0x72>
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	a1 09       	sbc	r26, r1
 490:	b0 48       	sbci	r27, 0x80	; 128
 492:	88 83       	st	Y, r24
 494:	99 83       	std	Y+1, r25	; 0x01
 496:	aa 83       	std	Y+2, r26	; 0x02
 498:	bb 83       	std	Y+3, r27	; 0x03
 49a:	9f 77       	andi	r25, 0x7F	; 127
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	ff 90       	pop	r15
 4a2:	ef 90       	pop	r14
 4a4:	df 90       	pop	r13
 4a6:	cf 90       	pop	r12
 4a8:	bf 90       	pop	r11
 4aa:	af 90       	pop	r10
 4ac:	9f 90       	pop	r9
 4ae:	8f 90       	pop	r8
 4b0:	08 95       	ret

000004b2 <rand_r>:
 4b2:	0e 94 10 02 	call	0x420	; 0x420 <do_rand>
 4b6:	08 95       	ret

000004b8 <rand>:
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	0e 94 10 02 	call	0x420	; 0x420 <do_rand>
 4c0:	08 95       	ret

000004c2 <srand>:
 4c2:	a0 e0       	ldi	r26, 0x00	; 0
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 4ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 4ce:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 4d2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 4d6:	08 95       	ret

000004d8 <eeprom_read_byte>:
 4d8:	f9 99       	sbic	0x1f, 1	; 31
 4da:	fe cf       	rjmp	.-4      	; 0x4d8 <eeprom_read_byte>
 4dc:	92 bd       	out	0x22, r25	; 34
 4de:	81 bd       	out	0x21, r24	; 33
 4e0:	f8 9a       	sbi	0x1f, 0	; 31
 4e2:	99 27       	eor	r25, r25
 4e4:	80 b5       	in	r24, 0x20	; 32
 4e6:	08 95       	ret

000004e8 <eeprom_write_byte>:
 4e8:	26 2f       	mov	r18, r22

000004ea <eeprom_write_r18>:
 4ea:	f9 99       	sbic	0x1f, 1	; 31
 4ec:	fe cf       	rjmp	.-4      	; 0x4ea <eeprom_write_r18>
 4ee:	1f ba       	out	0x1f, r1	; 31
 4f0:	92 bd       	out	0x22, r25	; 34
 4f2:	81 bd       	out	0x21, r24	; 33
 4f4:	20 bd       	out	0x20, r18	; 32
 4f6:	0f b6       	in	r0, 0x3f	; 63
 4f8:	f8 94       	cli
 4fa:	fa 9a       	sbi	0x1f, 2	; 31
 4fc:	f9 9a       	sbi	0x1f, 1	; 31
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	08 95       	ret

00000504 <__divmodsi4>:
 504:	05 2e       	mov	r0, r21
 506:	97 fb       	bst	r25, 7
 508:	1e f4       	brtc	.+6      	; 0x510 <__divmodsi4+0xc>
 50a:	00 94       	com	r0
 50c:	0e 94 99 02 	call	0x532	; 0x532 <__negsi2>
 510:	57 fd       	sbrc	r21, 7
 512:	07 d0       	rcall	.+14     	; 0x522 <__divmodsi4_neg2>
 514:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodsi4>
 518:	07 fc       	sbrc	r0, 7
 51a:	03 d0       	rcall	.+6      	; 0x522 <__divmodsi4_neg2>
 51c:	4e f4       	brtc	.+18     	; 0x530 <__divmodsi4_exit>
 51e:	0c 94 99 02 	jmp	0x532	; 0x532 <__negsi2>

00000522 <__divmodsi4_neg2>:
 522:	50 95       	com	r21
 524:	40 95       	com	r20
 526:	30 95       	com	r19
 528:	21 95       	neg	r18
 52a:	3f 4f       	sbci	r19, 0xFF	; 255
 52c:	4f 4f       	sbci	r20, 0xFF	; 255
 52e:	5f 4f       	sbci	r21, 0xFF	; 255

00000530 <__divmodsi4_exit>:
 530:	08 95       	ret

00000532 <__negsi2>:
 532:	90 95       	com	r25
 534:	80 95       	com	r24
 536:	70 95       	com	r23
 538:	61 95       	neg	r22
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	8f 4f       	sbci	r24, 0xFF	; 255
 53e:	9f 4f       	sbci	r25, 0xFF	; 255
 540:	08 95       	ret

00000542 <__muluhisi3>:
 542:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__umulhisi3>
 546:	a5 9f       	mul	r26, r21
 548:	90 0d       	add	r25, r0
 54a:	b4 9f       	mul	r27, r20
 54c:	90 0d       	add	r25, r0
 54e:	a4 9f       	mul	r26, r20
 550:	80 0d       	add	r24, r0
 552:	91 1d       	adc	r25, r1
 554:	11 24       	eor	r1, r1
 556:	08 95       	ret

00000558 <__mulshisi3>:
 558:	b7 ff       	sbrs	r27, 7
 55a:	0c 94 a1 02 	jmp	0x542	; 0x542 <__muluhisi3>

0000055e <__mulohisi3>:
 55e:	0e 94 a1 02 	call	0x542	; 0x542 <__muluhisi3>
 562:	82 1b       	sub	r24, r18
 564:	93 0b       	sbc	r25, r19
 566:	08 95       	ret

00000568 <__udivmodsi4>:
 568:	a1 e2       	ldi	r26, 0x21	; 33
 56a:	1a 2e       	mov	r1, r26
 56c:	aa 1b       	sub	r26, r26
 56e:	bb 1b       	sub	r27, r27
 570:	fd 01       	movw	r30, r26
 572:	0d c0       	rjmp	.+26     	; 0x58e <__udivmodsi4_ep>

00000574 <__udivmodsi4_loop>:
 574:	aa 1f       	adc	r26, r26
 576:	bb 1f       	adc	r27, r27
 578:	ee 1f       	adc	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	a2 17       	cp	r26, r18
 57e:	b3 07       	cpc	r27, r19
 580:	e4 07       	cpc	r30, r20
 582:	f5 07       	cpc	r31, r21
 584:	20 f0       	brcs	.+8      	; 0x58e <__udivmodsi4_ep>
 586:	a2 1b       	sub	r26, r18
 588:	b3 0b       	sbc	r27, r19
 58a:	e4 0b       	sbc	r30, r20
 58c:	f5 0b       	sbc	r31, r21

0000058e <__udivmodsi4_ep>:
 58e:	66 1f       	adc	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	88 1f       	adc	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	1a 94       	dec	r1
 598:	69 f7       	brne	.-38     	; 0x574 <__udivmodsi4_loop>
 59a:	60 95       	com	r22
 59c:	70 95       	com	r23
 59e:	80 95       	com	r24
 5a0:	90 95       	com	r25
 5a2:	9b 01       	movw	r18, r22
 5a4:	ac 01       	movw	r20, r24
 5a6:	bd 01       	movw	r22, r26
 5a8:	cf 01       	movw	r24, r30
 5aa:	08 95       	ret

000005ac <__umulhisi3>:
 5ac:	a2 9f       	mul	r26, r18
 5ae:	b0 01       	movw	r22, r0
 5b0:	b3 9f       	mul	r27, r19
 5b2:	c0 01       	movw	r24, r0
 5b4:	a3 9f       	mul	r26, r19
 5b6:	70 0d       	add	r23, r0
 5b8:	81 1d       	adc	r24, r1
 5ba:	11 24       	eor	r1, r1
 5bc:	91 1d       	adc	r25, r1
 5be:	b2 9f       	mul	r27, r18
 5c0:	70 0d       	add	r23, r0
 5c2:	81 1d       	adc	r24, r1
 5c4:	11 24       	eor	r1, r1
 5c6:	91 1d       	adc	r25, r1
 5c8:	08 95       	ret

000005ca <_exit>:
 5ca:	f8 94       	cli

000005cc <__stop_program>:
 5cc:	ff cf       	rjmp	.-2      	; 0x5cc <__stop_program>
