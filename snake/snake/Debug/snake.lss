
snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000874  00000908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000874  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  0080011a  0080011a  00000922  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000954  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000998  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001278  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a74  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000923  00000000  00000000  0000279c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  000030c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053b  00000000  00000000  000032d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085d  00000000  00000000  00003813  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 35       	cpi	r26, 0x5E	; 94
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 38 04 	jmp	0x870	; 0x870 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <spi_transfer>:
	Lower bound is inclusive, Upper bound is exclusive
*/
bool isBounded(uint8_t value, uint8_t lowerBound, uint8_t upperBound)
{
	return value >= lowerBound || value < upperBound;
}
  a6:	2a 98       	cbi	0x05, 2	; 5
  a8:	9e bd       	out	0x2e, r25	; 46
  aa:	0d b4       	in	r0, 0x2d	; 45
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <spi_transfer+0x4>
  b0:	8e bd       	out	0x2e, r24	; 46
  b2:	0d b4       	in	r0, 0x2d	; 45
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <spi_transfer+0xc>
  b8:	2a 9a       	sbi	0x05, 2	; 5
  ba:	89 ef       	ldi	r24, 0xF9	; 249
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <spi_transfer+0x18>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <spi_transfer+0x1e>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <setIntensity>:
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	9a 60       	ori	r25, 0x0A	; 10
  cc:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
  d0:	08 95       	ret

000000d2 <clearScreen>:
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	d1 e0       	ldi	r29, 0x01	; 1
  da:	ce 01       	movw	r24, r28
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
  e0:	d3 95       	inc	r29
  e2:	c1 15       	cp	r28, r1
  e4:	89 e0       	ldi	r24, 0x09	; 9
  e6:	d8 07       	cpc	r29, r24
  e8:	c1 f7       	brne	.-16     	; 0xda <clearScreen+0x8>
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <spi_init>:
  f0:	e1 e0       	ldi	r30, 0x01	; 1
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	df 01       	movw	r26, r30
  f6:	02 c0       	rjmp	.+4      	; 0xfc <spi_init+0xc>
  f8:	aa 0f       	add	r26, r26
  fa:	bb 1f       	adc	r27, r27
  fc:	4a 95       	dec	r20
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <spi_init+0x8>
 100:	ad 01       	movw	r20, r26
 102:	df 01       	movw	r26, r30
 104:	02 c0       	rjmp	.+4      	; 0x10a <spi_init+0x1a>
 106:	aa 0f       	add	r26, r26
 108:	bb 1f       	adc	r27, r27
 10a:	2a 95       	dec	r18
 10c:	e2 f7       	brpl	.-8      	; 0x106 <spi_init+0x16>
 10e:	9d 01       	movw	r18, r26
 110:	24 2b       	or	r18, r20
 112:	02 c0       	rjmp	.+4      	; 0x118 <spi_init+0x28>
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <spi_init+0x24>
 11c:	e2 2b       	or	r30, r18
 11e:	dc 01       	movw	r26, r24
 120:	ec 93       	st	X, r30
 122:	81 e5       	ldi	r24, 0x51	; 81
 124:	8c bd       	out	0x2c, r24	; 44
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	99 e0       	ldi	r25, 0x09	; 9
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 12e:	87 e0       	ldi	r24, 0x07	; 7
 130:	9b e0       	ldi	r25, 0x0B	; 11
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 136:	0e 94 69 00 	call	0xd2	; 0xd2 <clearScreen>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	9c e0       	ldi	r25, 0x0C	; 12
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 142:	08 95       	ret

00000144 <isBoardBounded>:

/* Convenience function for row and col bound checking */
bool isBoardBounded(uint8_t value)
{
	return isBounded(value, 0, BOARD_WIDTH);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	08 95       	ret

00000148 <setLED>:
	Sets the LED in desired cell
	row: 0 to 7; upper left is 0
	col: 0 to 7; upper left is 0
*/
void setLED(uint8_t row, uint8_t col, uint8_t state)
{
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	c8 2f       	mov	r28, r24
 156:	16 2f       	mov	r17, r22
 158:	04 2f       	mov	r16, r20
	if (!isBoardBounded(row) || !isBoardBounded(col)) 
 15a:	0e 94 a2 00 	call	0x144	; 0x144 <isBoardBounded>
 15e:	88 23       	and	r24, r24
 160:	91 f1       	breq	.+100    	; 0x1c6 <setLED+0x7e>
 162:	81 2f       	mov	r24, r17
 164:	0e 94 a2 00 	call	0x144	; 0x144 <isBoardBounded>
 168:	88 23       	and	r24, r24
 16a:	69 f1       	breq	.+90     	; 0x1c6 <setLED+0x7e>
		return;
	
	uint16_t data = ROWS[row];
 16c:	d0 e0       	ldi	r29, 0x00	; 0
 16e:	fe 01       	movw	r30, r28
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	e6 5f       	subi	r30, 0xF6	; 246
 176:	fe 4f       	sbci	r31, 0xFE	; 254
 178:	e0 80       	ld	r14, Z
 17a:	f1 80       	ldd	r15, Z+1	; 0x01
	
	// Turn off the cell
	if (state == LOW){
 17c:	01 11       	cpse	r16, r1
 17e:	0f c0       	rjmp	.+30     	; 0x19e <setLED+0x56>
		CLR_BIT(data, col);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <setLED+0x42>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	1a 95       	dec	r17
 18c:	e2 f7       	brpl	.-8      	; 0x186 <setLED+0x3e>
 18e:	80 95       	com	r24
 190:	90 95       	com	r25
 192:	e8 22       	and	r14, r24
 194:	f9 22       	and	r15, r25
		spi_transfer(data);
 196:	c7 01       	movw	r24, r14
 198:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 19c:	0e c0       	rjmp	.+28     	; 0x1ba <setLED+0x72>
	}
	// Turn on the cell
	if (state == HIGH){
 19e:	01 30       	cpi	r16, 0x01	; 1
 1a0:	61 f4       	brne	.+24     	; 0x1ba <setLED+0x72>
		SET_BIT(data, col);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <setLED+0x64>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	1a 95       	dec	r17
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <setLED+0x60>
 1b0:	e8 2a       	or	r14, r24
 1b2:	f9 2a       	or	r15, r25
		spi_transfer(data);
 1b4:	c7 01       	movw	r24, r14
 1b6:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
	}
	ROWS[row] = data;
 1ba:	cc 0f       	add	r28, r28
 1bc:	dd 1f       	adc	r29, r29
 1be:	c6 5f       	subi	r28, 0xF6	; 246
 1c0:	de 4f       	sbci	r29, 0xFE	; 254
 1c2:	f9 82       	std	Y+1, r15	; 0x01
 1c4:	e8 82       	st	Y, r14
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	08 95       	ret

000001d4 <setup>:
}

void setup()
{
	// Setup matrix
	SET_BIT(PORTB, CS_PIN); // Don't select matrix until transmission
 1d4:	2a 9a       	sbi	0x05, 2	; 5
	spi_init(&DDRB, DIN_PIN, SCK_PIN, CS_PIN);	// Initialize serial output pins on PORTB
 1d6:	22 e0       	ldi	r18, 0x02	; 2
 1d8:	45 e0       	ldi	r20, 0x05	; 5
 1da:	63 e0       	ldi	r22, 0x03	; 3
 1dc:	84 e2       	ldi	r24, 0x24	; 36
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 78 00 	call	0xf0	; 0xf0 <spi_init>
	setIntensity(15);
 1e4:	8f e0       	ldi	r24, 0x0F	; 15
 1e6:	0e 94 64 00 	call	0xc8	; 0xc8 <setIntensity>
	
	// Setup random generator
	randomInit();
 1ea:	0e 94 02 02 	call	0x404	; 0x404 <randomInit>
	
	// Place the first food
	placeFood();
 1ee:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <placeFood>
 1f2:	08 95       	ret

000001f4 <main>:

void setup();

int main(void)
{
    setup();
 1f4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <setup>
	
	snake_cell *snake = createSnake();
 1f8:	0e 94 bd 01 	call	0x37a	; 0x37a <createSnake>
    SET_BIT(DDRB, 0);	// Signal program is done
 1fc:	20 9a       	sbi	0x04, 0	; 4
    SET_BIT(PORTB, 0);
 1fe:	28 9a       	sbi	0x05, 0	; 5
 200:	ff cf       	rjmp	.-2      	; 0x200 <main+0xc>

00000202 <isAvailable>:
	*_col = -1;
}

/* Check if the row,col is available */
bool isAvailable(uint8_t row, uint8_t col)
{
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	c8 2f       	mov	r28, r24
 208:	d6 2f       	mov	r29, r22
	// Check range of row and col
	if (isBoardBounded(row) && isBoardBounded(col)){
 20a:	0e 94 a2 00 	call	0x144	; 0x144 <isBoardBounded>
 20e:	88 23       	and	r24, r24
 210:	a9 f0       	breq	.+42     	; 0x23c <isAvailable+0x3a>
 212:	8d 2f       	mov	r24, r29
 214:	0e 94 a2 00 	call	0x144	; 0x144 <isBoardBounded>
 218:	88 23       	and	r24, r24
 21a:	81 f0       	breq	.+32     	; 0x23c <isAvailable+0x3a>
		// Check if the board doesn't have an apple or snake segment
		return board[row][col] == 0;
 21c:	ec 2f       	mov	r30, r28
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ee 0f       	add	r30, r30
 222:	ff 1f       	adc	r31, r31
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	e6 5e       	subi	r30, 0xE6	; 230
 22e:	fe 4f       	sbci	r31, 0xFE	; 254
 230:	ed 0f       	add	r30, r29
 232:	f1 1d       	adc	r31, r1
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 81       	ld	r25, Z
 238:	91 11       	cpse	r25, r1
 23a:	80 e0       	ldi	r24, 0x00	; 0
	}
	else{
		return false;
	}
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <getAvailablePosition>:
	If position can't be randomly determined 8 times, will set the row and col
	to the first available location on the board. If no available location, 
	row and col are set to -1
*/
void getAvailablePosition(int8_t *_row, int8_t *_col)
{
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	7c 01       	movw	r14, r24
 254:	8b 01       	movw	r16, r22
	int8_t row = rand() % BOARD_WIDTH;
 256:	0e 94 aa 03 	call	0x754	; 0x754 <rand>
 25a:	87 70       	andi	r24, 0x07	; 7
 25c:	90 78       	andi	r25, 0x80	; 128
 25e:	99 23       	and	r25, r25
 260:	24 f4       	brge	.+8      	; 0x26a <getAvailablePosition+0x28>
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	88 6f       	ori	r24, 0xF8	; 248
 266:	9f 6f       	ori	r25, 0xFF	; 255
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	d8 2f       	mov	r29, r24
	int8_t col = rand() % BOARD_WIDTH;
 26c:	0e 94 aa 03 	call	0x754	; 0x754 <rand>
 270:	87 70       	andi	r24, 0x07	; 7
 272:	90 78       	andi	r25, 0x80	; 128
 274:	99 23       	and	r25, r25
 276:	24 f4       	brge	.+8      	; 0x280 <getAvailablePosition+0x3e>
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	88 6f       	ori	r24, 0xF8	; 248
 27c:	9f 6f       	ori	r25, 0xFF	; 255
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	c8 2f       	mov	r28, r24
 282:	0f 2e       	mov	r0, r31
 284:	f7 e0       	ldi	r31, 0x07	; 7
 286:	df 2e       	mov	r13, r31
 288:	f0 2d       	mov	r31, r0
	
	// Keeps looking for available row and col
	for (uint8_t i = 1; i < 8; i++){
		if (isAvailable(row,col)){
 28a:	6c 2f       	mov	r22, r28
 28c:	8d 2f       	mov	r24, r29
 28e:	0e 94 01 01 	call	0x202	; 0x202 <isAvailable>
 292:	88 23       	and	r24, r24
 294:	29 f0       	breq	.+10     	; 0x2a0 <getAvailablePosition+0x5e>
			// Update pointers
			*_row = row;
 296:	f7 01       	movw	r30, r14
 298:	d0 83       	st	Z, r29
			*_col = col;
 29a:	f8 01       	movw	r30, r16
 29c:	c0 83       	st	Z, r28
			return;
 29e:	37 c0       	rjmp	.+110    	; 0x30e <getAvailablePosition+0xcc>
		}
		else{
			// Update position
			row = rand() % BOARD_WIDTH;
 2a0:	0e 94 aa 03 	call	0x754	; 0x754 <rand>
 2a4:	87 70       	andi	r24, 0x07	; 7
 2a6:	90 78       	andi	r25, 0x80	; 128
 2a8:	99 23       	and	r25, r25
 2aa:	24 f4       	brge	.+8      	; 0x2b4 <getAvailablePosition+0x72>
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	88 6f       	ori	r24, 0xF8	; 248
 2b0:	9f 6f       	ori	r25, 0xFF	; 255
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	d8 2f       	mov	r29, r24
			col = rand() % BOARD_WIDTH;
 2b6:	0e 94 aa 03 	call	0x754	; 0x754 <rand>
 2ba:	87 70       	andi	r24, 0x07	; 7
 2bc:	90 78       	andi	r25, 0x80	; 128
 2be:	99 23       	and	r25, r25
 2c0:	24 f4       	brge	.+8      	; 0x2ca <getAvailablePosition+0x88>
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	88 6f       	ori	r24, 0xF8	; 248
 2c6:	9f 6f       	ori	r25, 0xFF	; 255
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	c8 2f       	mov	r28, r24
 2cc:	da 94       	dec	r13
{
	int8_t row = rand() % BOARD_WIDTH;
	int8_t col = rand() % BOARD_WIDTH;
	
	// Keeps looking for available row and col
	for (uint8_t i = 1; i < 8; i++){
 2ce:	d1 10       	cpse	r13, r1
 2d0:	dc cf       	rjmp	.-72     	; 0x28a <getAvailablePosition+0x48>
 2d2:	c1 2c       	mov	r12, r1
 2d4:	14 c0       	rjmp	.+40     	; 0x2fe <getAvailablePosition+0xbc>
	
	// Available random location wasn't found
	// Search for first free location
	for (int8_t row = 0; row < BOARD_WIDTH; row++){
		for (int8_t col = 0; col < BOARD_WIDTH; col++){
			if (isAvailable(row, col)){
 2d6:	6c 2f       	mov	r22, r28
 2d8:	8d 2f       	mov	r24, r29
 2da:	0e 94 01 01 	call	0x202	; 0x202 <isAvailable>
 2de:	88 23       	and	r24, r24
 2e0:	29 f0       	breq	.+10     	; 0x2ec <getAvailablePosition+0xaa>
				// Update pointers
				*_row = row;
 2e2:	f7 01       	movw	r30, r14
 2e4:	c0 82       	st	Z, r12
				*_col = col;
 2e6:	f8 01       	movw	r30, r16
 2e8:	c0 83       	st	Z, r28
				return;	
 2ea:	11 c0       	rjmp	.+34     	; 0x30e <getAvailablePosition+0xcc>
 2ec:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	// Available random location wasn't found
	// Search for first free location
	for (int8_t row = 0; row < BOARD_WIDTH; row++){
		for (int8_t col = 0; col < BOARD_WIDTH; col++){
 2ee:	c8 30       	cpi	r28, 0x08	; 8
 2f0:	91 f7       	brne	.-28     	; 0x2d6 <getAvailablePosition+0x94>
 2f2:	cc 24       	eor	r12, r12
 2f4:	c3 94       	inc	r12
 2f6:	cd 0e       	add	r12, r29
		}
	}
	
	// Available random location wasn't found
	// Search for first free location
	for (int8_t row = 0; row < BOARD_WIDTH; row++){
 2f8:	f8 e0       	ldi	r31, 0x08	; 8
 2fa:	cf 16       	cp	r12, r31
 2fc:	19 f0       	breq	.+6      	; 0x304 <getAvailablePosition+0xc2>
	row and col are set to -1
*/
void getAvailablePosition(int8_t *_row, int8_t *_col)
{
	int8_t row = rand() % BOARD_WIDTH;
	int8_t col = rand() % BOARD_WIDTH;
 2fe:	c0 e0       	ldi	r28, 0x00	; 0
	
	// Available random location wasn't found
	// Search for first free location
	for (int8_t row = 0; row < BOARD_WIDTH; row++){
		for (int8_t col = 0; col < BOARD_WIDTH; col++){
			if (isAvailable(row, col)){
 300:	dc 2d       	mov	r29, r12
 302:	e9 cf       	rjmp	.-46     	; 0x2d6 <getAvailablePosition+0x94>
			}
		}
	}
	
	// No location was found. Set position to -1
	*_row = -1;
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	f7 01       	movw	r30, r14
 308:	80 83       	st	Z, r24
	*_col = -1;
 30a:	f8 01       	movw	r30, r16
 30c:	80 83       	st	Z, r24
}
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	df 90       	pop	r13
 31c:	cf 90       	pop	r12
 31e:	08 95       	ret

00000320 <updateBoard>:
	}
}


void updateBoard(uint8_t row, uint8_t col, uint8_t value)
{
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	c8 2f       	mov	r28, r24
 328:	d6 2f       	mov	r29, r22
 32a:	14 2f       	mov	r17, r20
	if (!isBoardBounded(row) || !isBoardBounded(col))
 32c:	0e 94 a2 00 	call	0x144	; 0x144 <isBoardBounded>
 330:	88 23       	and	r24, r24
 332:	f9 f0       	breq	.+62     	; 0x372 <updateBoard+0x52>
 334:	8d 2f       	mov	r24, r29
 336:	0e 94 a2 00 	call	0x144	; 0x144 <isBoardBounded>
 33a:	88 23       	and	r24, r24
 33c:	d1 f0       	breq	.+52     	; 0x372 <updateBoard+0x52>
		return;
		
	board[row][col] = value;
 33e:	ec 2f       	mov	r30, r28
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ee 0f       	add	r30, r30
 344:	ff 1f       	adc	r31, r31
 346:	ee 0f       	add	r30, r30
 348:	ff 1f       	adc	r31, r31
 34a:	ee 0f       	add	r30, r30
 34c:	ff 1f       	adc	r31, r31
 34e:	e6 5e       	subi	r30, 0xE6	; 230
 350:	fe 4f       	sbci	r31, 0xFE	; 254
 352:	ed 0f       	add	r30, r29
 354:	f1 1d       	adc	r31, r1
 356:	10 83       	st	Z, r17
	if (value != LOW){
 358:	11 23       	and	r17, r17
 35a:	31 f0       	breq	.+12     	; 0x368 <updateBoard+0x48>
		setLED(row, col, HIGH);
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	6d 2f       	mov	r22, r29
 360:	8c 2f       	mov	r24, r28
 362:	0e 94 a4 00 	call	0x148	; 0x148 <setLED>
 366:	05 c0       	rjmp	.+10     	; 0x372 <updateBoard+0x52>
	}
	else {
		setLED(row, col, LOW);
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	6d 2f       	mov	r22, r29
 36c:	8c 2f       	mov	r24, r28
 36e:	0e 94 a4 00 	call	0x148	; 0x148 <setLED>
	}
}
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	08 95       	ret

0000037a <createSnake>:

/*
	Creates the head of the snake at a random location
*/
snake_cell* createSnake()
{
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	00 d0       	rcall	.+0      	; 0x384 <createSnake+0xa>
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
	// Allocate space
	snake_cell *head = (snake_cell *) malloc(sizeof(snake_cell));
 388:	84 e0       	ldi	r24, 0x04	; 4
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 3d 02 	call	0x47a	; 0x47a <malloc>
 390:	8c 01       	movw	r16, r24
	int8_t head_row, head_col;
	getAvailablePosition(&head_row, &head_col);
 392:	be 01       	movw	r22, r28
 394:	6e 5f       	subi	r22, 0xFE	; 254
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	ce 01       	movw	r24, r28
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	0e 94 21 01 	call	0x242	; 0x242 <getAvailablePosition>
	
	// Position should never be -1 when starting a game
	assert(head_row != -1 && head_col != -1);
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	8f 3f       	cpi	r24, 0xFF	; 255
 3a4:	19 f0       	breq	.+6      	; 0x3ac <createSnake+0x32>
 3a6:	6a 81       	ldd	r22, Y+2	; 0x02
 3a8:	6f 3f       	cpi	r22, 0xFF	; 255
 3aa:	11 f4       	brne	.+4      	; 0x3b0 <createSnake+0x36>
 3ac:	0e 94 ba 03 	call	0x774	; 0x774 <abort>
	
	// Setup the head values
	head->row = head_row;
 3b0:	f8 01       	movw	r30, r16
 3b2:	80 83       	st	Z, r24
	head->col = head_col;
 3b4:	61 83       	std	Z+1, r22	; 0x01
	head->next = NULL;
 3b6:	13 82       	std	Z+3, r1	; 0x03
 3b8:	12 82       	std	Z+2, r1	; 0x02
	
	// Place the snake on the board
	updateBoard(head_row, head_col, HIGH);
 3ba:	41 e0       	ldi	r20, 0x01	; 1
 3bc:	0e 94 90 01 	call	0x320	; 0x320 <updateBoard>
	return head;
}
 3c0:	c8 01       	movw	r24, r16
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	1f 91       	pop	r17
 3cc:	0f 91       	pop	r16
 3ce:	08 95       	ret

000003d0 <placeFood>:
		return false;
	}
}

void placeFood()
{
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <placeFood+0x6>
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
	int8_t food_row;
	int8_t food_col;
	getAvailablePosition(&food_row, &food_col);
 3da:	be 01       	movw	r22, r28
 3dc:	6e 5f       	subi	r22, 0xFE	; 254
 3de:	7f 4f       	sbci	r23, 0xFF	; 255
 3e0:	ce 01       	movw	r24, r28
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	0e 94 21 01 	call	0x242	; 0x242 <getAvailablePosition>
	if (food_row != -1 && food_col != -1){
 3e8:	89 81       	ldd	r24, Y+1	; 0x01
 3ea:	8f 3f       	cpi	r24, 0xFF	; 255
 3ec:	31 f0       	breq	.+12     	; 0x3fa <placeFood+0x2a>
 3ee:	6a 81       	ldd	r22, Y+2	; 0x02
 3f0:	6f 3f       	cpi	r22, 0xFF	; 255
 3f2:	19 f0       	breq	.+6      	; 0x3fa <placeFood+0x2a>
		updateBoard(food_row, food_col, HIGH);
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	0e 94 90 01 	call	0x320	; 0x320 <updateBoard>
	}
	else{
		endGame();
	}
}
 3fa:	0f 90       	pop	r0
 3fc:	0f 90       	pop	r0
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <randomInit>:

/* Initialize random to be random enough for game play */
void randomInit()
{
	// Obtain value from EEPROM
	uint8_t seed = eeprom_read_byte((uint8_t*)0x66); 
 404:	86 e6       	ldi	r24, 0x66	; 102
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 bf 03 	call	0x77e	; 0x77e <eeprom_read_byte>
	// Set the random seed
	srand(seed);
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 af 03 	call	0x75e	; 0x75e <srand>
	// Obtain random char value
	seed = rand() % 255;
 412:	0e 94 aa 03 	call	0x754	; 0x754 <rand>
	// Store seed for future use
	eeprom_write_byte((uint8_t*)0x66, seed);
 416:	6f ef       	ldi	r22, 0xFF	; 255
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	0e 94 15 02 	call	0x42a	; 0x42a <__divmodhi4>
 41e:	68 2f       	mov	r22, r24
 420:	86 e6       	ldi	r24, 0x66	; 102
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 c7 03 	call	0x78e	; 0x78e <eeprom_write_byte>
 428:	08 95       	ret

0000042a <__divmodhi4>:
 42a:	97 fb       	bst	r25, 7
 42c:	07 2e       	mov	r0, r23
 42e:	16 f4       	brtc	.+4      	; 0x434 <__divmodhi4+0xa>
 430:	00 94       	com	r0
 432:	07 d0       	rcall	.+14     	; 0x442 <__divmodhi4_neg1>
 434:	77 fd       	sbrc	r23, 7
 436:	09 d0       	rcall	.+18     	; 0x44a <__divmodhi4_neg2>
 438:	0e 94 29 02 	call	0x452	; 0x452 <__udivmodhi4>
 43c:	07 fc       	sbrc	r0, 7
 43e:	05 d0       	rcall	.+10     	; 0x44a <__divmodhi4_neg2>
 440:	3e f4       	brtc	.+14     	; 0x450 <__divmodhi4_exit>

00000442 <__divmodhi4_neg1>:
 442:	90 95       	com	r25
 444:	81 95       	neg	r24
 446:	9f 4f       	sbci	r25, 0xFF	; 255
 448:	08 95       	ret

0000044a <__divmodhi4_neg2>:
 44a:	70 95       	com	r23
 44c:	61 95       	neg	r22
 44e:	7f 4f       	sbci	r23, 0xFF	; 255

00000450 <__divmodhi4_exit>:
 450:	08 95       	ret

00000452 <__udivmodhi4>:
 452:	aa 1b       	sub	r26, r26
 454:	bb 1b       	sub	r27, r27
 456:	51 e1       	ldi	r21, 0x11	; 17
 458:	07 c0       	rjmp	.+14     	; 0x468 <__udivmodhi4_ep>

0000045a <__udivmodhi4_loop>:
 45a:	aa 1f       	adc	r26, r26
 45c:	bb 1f       	adc	r27, r27
 45e:	a6 17       	cp	r26, r22
 460:	b7 07       	cpc	r27, r23
 462:	10 f0       	brcs	.+4      	; 0x468 <__udivmodhi4_ep>
 464:	a6 1b       	sub	r26, r22
 466:	b7 0b       	sbc	r27, r23

00000468 <__udivmodhi4_ep>:
 468:	88 1f       	adc	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	5a 95       	dec	r21
 46e:	a9 f7       	brne	.-22     	; 0x45a <__udivmodhi4_loop>
 470:	80 95       	com	r24
 472:	90 95       	com	r25
 474:	bc 01       	movw	r22, r24
 476:	cd 01       	movw	r24, r26
 478:	08 95       	ret

0000047a <malloc>:
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	82 30       	cpi	r24, 0x02	; 2
 484:	91 05       	cpc	r25, r1
 486:	10 f4       	brcc	.+4      	; 0x48c <malloc+0x12>
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <__flp>
 490:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <__flp+0x1>
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	a0 e0       	ldi	r26, 0x00	; 0
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	30 97       	sbiw	r30, 0x00	; 0
 49e:	19 f1       	breq	.+70     	; 0x4e6 <malloc+0x6c>
 4a0:	40 81       	ld	r20, Z
 4a2:	51 81       	ldd	r21, Z+1	; 0x01
 4a4:	02 81       	ldd	r16, Z+2	; 0x02
 4a6:	13 81       	ldd	r17, Z+3	; 0x03
 4a8:	48 17       	cp	r20, r24
 4aa:	59 07       	cpc	r21, r25
 4ac:	c8 f0       	brcs	.+50     	; 0x4e0 <malloc+0x66>
 4ae:	84 17       	cp	r24, r20
 4b0:	95 07       	cpc	r25, r21
 4b2:	69 f4       	brne	.+26     	; 0x4ce <malloc+0x54>
 4b4:	10 97       	sbiw	r26, 0x00	; 0
 4b6:	31 f0       	breq	.+12     	; 0x4c4 <malloc+0x4a>
 4b8:	12 96       	adiw	r26, 0x02	; 2
 4ba:	0c 93       	st	X, r16
 4bc:	12 97       	sbiw	r26, 0x02	; 2
 4be:	13 96       	adiw	r26, 0x03	; 3
 4c0:	1c 93       	st	X, r17
 4c2:	27 c0       	rjmp	.+78     	; 0x512 <malloc+0x98>
 4c4:	00 93 5c 01 	sts	0x015C, r16	; 0x80015c <__flp>
 4c8:	10 93 5d 01 	sts	0x015D, r17	; 0x80015d <__flp+0x1>
 4cc:	22 c0       	rjmp	.+68     	; 0x512 <malloc+0x98>
 4ce:	21 15       	cp	r18, r1
 4d0:	31 05       	cpc	r19, r1
 4d2:	19 f0       	breq	.+6      	; 0x4da <malloc+0x60>
 4d4:	42 17       	cp	r20, r18
 4d6:	53 07       	cpc	r21, r19
 4d8:	18 f4       	brcc	.+6      	; 0x4e0 <malloc+0x66>
 4da:	9a 01       	movw	r18, r20
 4dc:	bd 01       	movw	r22, r26
 4de:	ef 01       	movw	r28, r30
 4e0:	df 01       	movw	r26, r30
 4e2:	f8 01       	movw	r30, r16
 4e4:	db cf       	rjmp	.-74     	; 0x49c <malloc+0x22>
 4e6:	21 15       	cp	r18, r1
 4e8:	31 05       	cpc	r19, r1
 4ea:	f9 f0       	breq	.+62     	; 0x52a <malloc+0xb0>
 4ec:	28 1b       	sub	r18, r24
 4ee:	39 0b       	sbc	r19, r25
 4f0:	24 30       	cpi	r18, 0x04	; 4
 4f2:	31 05       	cpc	r19, r1
 4f4:	80 f4       	brcc	.+32     	; 0x516 <malloc+0x9c>
 4f6:	8a 81       	ldd	r24, Y+2	; 0x02
 4f8:	9b 81       	ldd	r25, Y+3	; 0x03
 4fa:	61 15       	cp	r22, r1
 4fc:	71 05       	cpc	r23, r1
 4fe:	21 f0       	breq	.+8      	; 0x508 <malloc+0x8e>
 500:	fb 01       	movw	r30, r22
 502:	93 83       	std	Z+3, r25	; 0x03
 504:	82 83       	std	Z+2, r24	; 0x02
 506:	04 c0       	rjmp	.+8      	; 0x510 <malloc+0x96>
 508:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__flp+0x1>
 50c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__flp>
 510:	fe 01       	movw	r30, r28
 512:	32 96       	adiw	r30, 0x02	; 2
 514:	44 c0       	rjmp	.+136    	; 0x59e <malloc+0x124>
 516:	fe 01       	movw	r30, r28
 518:	e2 0f       	add	r30, r18
 51a:	f3 1f       	adc	r31, r19
 51c:	81 93       	st	Z+, r24
 51e:	91 93       	st	Z+, r25
 520:	22 50       	subi	r18, 0x02	; 2
 522:	31 09       	sbc	r19, r1
 524:	39 83       	std	Y+1, r19	; 0x01
 526:	28 83       	st	Y, r18
 528:	3a c0       	rjmp	.+116    	; 0x59e <malloc+0x124>
 52a:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <__brkval>
 52e:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <__brkval+0x1>
 532:	23 2b       	or	r18, r19
 534:	41 f4       	brne	.+16     	; 0x546 <malloc+0xcc>
 536:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 53a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 53e:	30 93 5b 01 	sts	0x015B, r19	; 0x80015b <__brkval+0x1>
 542:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <__brkval>
 546:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 54a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 54e:	21 15       	cp	r18, r1
 550:	31 05       	cpc	r19, r1
 552:	41 f4       	brne	.+16     	; 0x564 <malloc+0xea>
 554:	2d b7       	in	r18, 0x3d	; 61
 556:	3e b7       	in	r19, 0x3e	; 62
 558:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 55c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 560:	24 1b       	sub	r18, r20
 562:	35 0b       	sbc	r19, r21
 564:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <__brkval>
 568:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <__brkval+0x1>
 56c:	e2 17       	cp	r30, r18
 56e:	f3 07       	cpc	r31, r19
 570:	a0 f4       	brcc	.+40     	; 0x59a <malloc+0x120>
 572:	2e 1b       	sub	r18, r30
 574:	3f 0b       	sbc	r19, r31
 576:	28 17       	cp	r18, r24
 578:	39 07       	cpc	r19, r25
 57a:	78 f0       	brcs	.+30     	; 0x59a <malloc+0x120>
 57c:	ac 01       	movw	r20, r24
 57e:	4e 5f       	subi	r20, 0xFE	; 254
 580:	5f 4f       	sbci	r21, 0xFF	; 255
 582:	24 17       	cp	r18, r20
 584:	35 07       	cpc	r19, r21
 586:	48 f0       	brcs	.+18     	; 0x59a <malloc+0x120>
 588:	4e 0f       	add	r20, r30
 58a:	5f 1f       	adc	r21, r31
 58c:	50 93 5b 01 	sts	0x015B, r21	; 0x80015b <__brkval+0x1>
 590:	40 93 5a 01 	sts	0x015A, r20	; 0x80015a <__brkval>
 594:	81 93       	st	Z+, r24
 596:	91 93       	st	Z+, r25
 598:	02 c0       	rjmp	.+4      	; 0x59e <malloc+0x124>
 59a:	e0 e0       	ldi	r30, 0x00	; 0
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	cf 01       	movw	r24, r30
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	08 95       	ret

000005aa <free>:
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	00 97       	sbiw	r24, 0x00	; 0
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <free+0xa>
 5b2:	81 c0       	rjmp	.+258    	; 0x6b6 <free+0x10c>
 5b4:	fc 01       	movw	r30, r24
 5b6:	32 97       	sbiw	r30, 0x02	; 2
 5b8:	13 82       	std	Z+3, r1	; 0x03
 5ba:	12 82       	std	Z+2, r1	; 0x02
 5bc:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <__flp>
 5c0:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <__flp+0x1>
 5c4:	10 97       	sbiw	r26, 0x00	; 0
 5c6:	81 f4       	brne	.+32     	; 0x5e8 <free+0x3e>
 5c8:	20 81       	ld	r18, Z
 5ca:	31 81       	ldd	r19, Z+1	; 0x01
 5cc:	82 0f       	add	r24, r18
 5ce:	93 1f       	adc	r25, r19
 5d0:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <__brkval>
 5d4:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <__brkval+0x1>
 5d8:	28 17       	cp	r18, r24
 5da:	39 07       	cpc	r19, r25
 5dc:	51 f5       	brne	.+84     	; 0x632 <free+0x88>
 5de:	f0 93 5b 01 	sts	0x015B, r31	; 0x80015b <__brkval+0x1>
 5e2:	e0 93 5a 01 	sts	0x015A, r30	; 0x80015a <__brkval>
 5e6:	67 c0       	rjmp	.+206    	; 0x6b6 <free+0x10c>
 5e8:	ed 01       	movw	r28, r26
 5ea:	20 e0       	ldi	r18, 0x00	; 0
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	ce 17       	cp	r28, r30
 5f0:	df 07       	cpc	r29, r31
 5f2:	40 f4       	brcc	.+16     	; 0x604 <free+0x5a>
 5f4:	4a 81       	ldd	r20, Y+2	; 0x02
 5f6:	5b 81       	ldd	r21, Y+3	; 0x03
 5f8:	9e 01       	movw	r18, r28
 5fa:	41 15       	cp	r20, r1
 5fc:	51 05       	cpc	r21, r1
 5fe:	f1 f0       	breq	.+60     	; 0x63c <free+0x92>
 600:	ea 01       	movw	r28, r20
 602:	f5 cf       	rjmp	.-22     	; 0x5ee <free+0x44>
 604:	d3 83       	std	Z+3, r29	; 0x03
 606:	c2 83       	std	Z+2, r28	; 0x02
 608:	40 81       	ld	r20, Z
 60a:	51 81       	ldd	r21, Z+1	; 0x01
 60c:	84 0f       	add	r24, r20
 60e:	95 1f       	adc	r25, r21
 610:	c8 17       	cp	r28, r24
 612:	d9 07       	cpc	r29, r25
 614:	59 f4       	brne	.+22     	; 0x62c <free+0x82>
 616:	88 81       	ld	r24, Y
 618:	99 81       	ldd	r25, Y+1	; 0x01
 61a:	84 0f       	add	r24, r20
 61c:	95 1f       	adc	r25, r21
 61e:	02 96       	adiw	r24, 0x02	; 2
 620:	91 83       	std	Z+1, r25	; 0x01
 622:	80 83       	st	Z, r24
 624:	8a 81       	ldd	r24, Y+2	; 0x02
 626:	9b 81       	ldd	r25, Y+3	; 0x03
 628:	93 83       	std	Z+3, r25	; 0x03
 62a:	82 83       	std	Z+2, r24	; 0x02
 62c:	21 15       	cp	r18, r1
 62e:	31 05       	cpc	r19, r1
 630:	29 f4       	brne	.+10     	; 0x63c <free+0x92>
 632:	f0 93 5d 01 	sts	0x015D, r31	; 0x80015d <__flp+0x1>
 636:	e0 93 5c 01 	sts	0x015C, r30	; 0x80015c <__flp>
 63a:	3d c0       	rjmp	.+122    	; 0x6b6 <free+0x10c>
 63c:	e9 01       	movw	r28, r18
 63e:	fb 83       	std	Y+3, r31	; 0x03
 640:	ea 83       	std	Y+2, r30	; 0x02
 642:	49 91       	ld	r20, Y+
 644:	59 91       	ld	r21, Y+
 646:	c4 0f       	add	r28, r20
 648:	d5 1f       	adc	r29, r21
 64a:	ec 17       	cp	r30, r28
 64c:	fd 07       	cpc	r31, r29
 64e:	61 f4       	brne	.+24     	; 0x668 <free+0xbe>
 650:	80 81       	ld	r24, Z
 652:	91 81       	ldd	r25, Z+1	; 0x01
 654:	84 0f       	add	r24, r20
 656:	95 1f       	adc	r25, r21
 658:	02 96       	adiw	r24, 0x02	; 2
 65a:	e9 01       	movw	r28, r18
 65c:	99 83       	std	Y+1, r25	; 0x01
 65e:	88 83       	st	Y, r24
 660:	82 81       	ldd	r24, Z+2	; 0x02
 662:	93 81       	ldd	r25, Z+3	; 0x03
 664:	9b 83       	std	Y+3, r25	; 0x03
 666:	8a 83       	std	Y+2, r24	; 0x02
 668:	e0 e0       	ldi	r30, 0x00	; 0
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	12 96       	adiw	r26, 0x02	; 2
 66e:	8d 91       	ld	r24, X+
 670:	9c 91       	ld	r25, X
 672:	13 97       	sbiw	r26, 0x03	; 3
 674:	00 97       	sbiw	r24, 0x00	; 0
 676:	19 f0       	breq	.+6      	; 0x67e <free+0xd4>
 678:	fd 01       	movw	r30, r26
 67a:	dc 01       	movw	r26, r24
 67c:	f7 cf       	rjmp	.-18     	; 0x66c <free+0xc2>
 67e:	8d 91       	ld	r24, X+
 680:	9c 91       	ld	r25, X
 682:	11 97       	sbiw	r26, 0x01	; 1
 684:	9d 01       	movw	r18, r26
 686:	2e 5f       	subi	r18, 0xFE	; 254
 688:	3f 4f       	sbci	r19, 0xFF	; 255
 68a:	82 0f       	add	r24, r18
 68c:	93 1f       	adc	r25, r19
 68e:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <__brkval>
 692:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <__brkval+0x1>
 696:	28 17       	cp	r18, r24
 698:	39 07       	cpc	r19, r25
 69a:	69 f4       	brne	.+26     	; 0x6b6 <free+0x10c>
 69c:	30 97       	sbiw	r30, 0x00	; 0
 69e:	29 f4       	brne	.+10     	; 0x6aa <free+0x100>
 6a0:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <__flp+0x1>
 6a4:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__flp>
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <free+0x104>
 6aa:	13 82       	std	Z+3, r1	; 0x03
 6ac:	12 82       	std	Z+2, r1	; 0x02
 6ae:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <__brkval+0x1>
 6b2:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <__brkval>
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	08 95       	ret

000006bc <do_rand>:
 6bc:	8f 92       	push	r8
 6be:	9f 92       	push	r9
 6c0:	af 92       	push	r10
 6c2:	bf 92       	push	r11
 6c4:	cf 92       	push	r12
 6c6:	df 92       	push	r13
 6c8:	ef 92       	push	r14
 6ca:	ff 92       	push	r15
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	ec 01       	movw	r28, r24
 6d2:	68 81       	ld	r22, Y
 6d4:	79 81       	ldd	r23, Y+1	; 0x01
 6d6:	8a 81       	ldd	r24, Y+2	; 0x02
 6d8:	9b 81       	ldd	r25, Y+3	; 0x03
 6da:	61 15       	cp	r22, r1
 6dc:	71 05       	cpc	r23, r1
 6de:	81 05       	cpc	r24, r1
 6e0:	91 05       	cpc	r25, r1
 6e2:	21 f4       	brne	.+8      	; 0x6ec <do_rand+0x30>
 6e4:	64 e2       	ldi	r22, 0x24	; 36
 6e6:	79 ed       	ldi	r23, 0xD9	; 217
 6e8:	8b e5       	ldi	r24, 0x5B	; 91
 6ea:	97 e0       	ldi	r25, 0x07	; 7
 6ec:	2d e1       	ldi	r18, 0x1D	; 29
 6ee:	33 ef       	ldi	r19, 0xF3	; 243
 6f0:	41 e0       	ldi	r20, 0x01	; 1
 6f2:	50 e0       	ldi	r21, 0x00	; 0
 6f4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__divmodsi4>
 6f8:	49 01       	movw	r8, r18
 6fa:	5a 01       	movw	r10, r20
 6fc:	9b 01       	movw	r18, r22
 6fe:	ac 01       	movw	r20, r24
 700:	a7 ea       	ldi	r26, 0xA7	; 167
 702:	b1 e4       	ldi	r27, 0x41	; 65
 704:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__muluhisi3>
 708:	6b 01       	movw	r12, r22
 70a:	7c 01       	movw	r14, r24
 70c:	ac ee       	ldi	r26, 0xEC	; 236
 70e:	b4 ef       	ldi	r27, 0xF4	; 244
 710:	a5 01       	movw	r20, r10
 712:	94 01       	movw	r18, r8
 714:	0e 94 02 04 	call	0x804	; 0x804 <__mulohisi3>
 718:	dc 01       	movw	r26, r24
 71a:	cb 01       	movw	r24, r22
 71c:	8c 0d       	add	r24, r12
 71e:	9d 1d       	adc	r25, r13
 720:	ae 1d       	adc	r26, r14
 722:	bf 1d       	adc	r27, r15
 724:	b7 ff       	sbrs	r27, 7
 726:	03 c0       	rjmp	.+6      	; 0x72e <do_rand+0x72>
 728:	01 97       	sbiw	r24, 0x01	; 1
 72a:	a1 09       	sbc	r26, r1
 72c:	b0 48       	sbci	r27, 0x80	; 128
 72e:	88 83       	st	Y, r24
 730:	99 83       	std	Y+1, r25	; 0x01
 732:	aa 83       	std	Y+2, r26	; 0x02
 734:	bb 83       	std	Y+3, r27	; 0x03
 736:	9f 77       	andi	r25, 0x7F	; 127
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	ff 90       	pop	r15
 73e:	ef 90       	pop	r14
 740:	df 90       	pop	r13
 742:	cf 90       	pop	r12
 744:	bf 90       	pop	r11
 746:	af 90       	pop	r10
 748:	9f 90       	pop	r9
 74a:	8f 90       	pop	r8
 74c:	08 95       	ret

0000074e <rand_r>:
 74e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <do_rand>
 752:	08 95       	ret

00000754 <rand>:
 754:	86 e0       	ldi	r24, 0x06	; 6
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	0e 94 5e 03 	call	0x6bc	; 0x6bc <do_rand>
 75c:	08 95       	ret

0000075e <srand>:
 75e:	a0 e0       	ldi	r26, 0x00	; 0
 760:	b0 e0       	ldi	r27, 0x00	; 0
 762:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
 766:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
 76a:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
 76e:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
 772:	08 95       	ret

00000774 <abort>:
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	f8 94       	cli
 77a:	0c 94 38 04 	jmp	0x870	; 0x870 <_exit>

0000077e <eeprom_read_byte>:
 77e:	f9 99       	sbic	0x1f, 1	; 31
 780:	fe cf       	rjmp	.-4      	; 0x77e <eeprom_read_byte>
 782:	92 bd       	out	0x22, r25	; 34
 784:	81 bd       	out	0x21, r24	; 33
 786:	f8 9a       	sbi	0x1f, 0	; 31
 788:	99 27       	eor	r25, r25
 78a:	80 b5       	in	r24, 0x20	; 32
 78c:	08 95       	ret

0000078e <eeprom_write_byte>:
 78e:	26 2f       	mov	r18, r22

00000790 <eeprom_write_r18>:
 790:	f9 99       	sbic	0x1f, 1	; 31
 792:	fe cf       	rjmp	.-4      	; 0x790 <eeprom_write_r18>
 794:	1f ba       	out	0x1f, r1	; 31
 796:	92 bd       	out	0x22, r25	; 34
 798:	81 bd       	out	0x21, r24	; 33
 79a:	20 bd       	out	0x20, r18	; 32
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	f8 94       	cli
 7a0:	fa 9a       	sbi	0x1f, 2	; 31
 7a2:	f9 9a       	sbi	0x1f, 1	; 31
 7a4:	0f be       	out	0x3f, r0	; 63
 7a6:	01 96       	adiw	r24, 0x01	; 1
 7a8:	08 95       	ret

000007aa <__divmodsi4>:
 7aa:	05 2e       	mov	r0, r21
 7ac:	97 fb       	bst	r25, 7
 7ae:	1e f4       	brtc	.+6      	; 0x7b6 <__divmodsi4+0xc>
 7b0:	00 94       	com	r0
 7b2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__negsi2>
 7b6:	57 fd       	sbrc	r21, 7
 7b8:	07 d0       	rcall	.+14     	; 0x7c8 <__divmodsi4_neg2>
 7ba:	0e 94 07 04 	call	0x80e	; 0x80e <__udivmodsi4>
 7be:	07 fc       	sbrc	r0, 7
 7c0:	03 d0       	rcall	.+6      	; 0x7c8 <__divmodsi4_neg2>
 7c2:	4e f4       	brtc	.+18     	; 0x7d6 <__divmodsi4_exit>
 7c4:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__negsi2>

000007c8 <__divmodsi4_neg2>:
 7c8:	50 95       	com	r21
 7ca:	40 95       	com	r20
 7cc:	30 95       	com	r19
 7ce:	21 95       	neg	r18
 7d0:	3f 4f       	sbci	r19, 0xFF	; 255
 7d2:	4f 4f       	sbci	r20, 0xFF	; 255
 7d4:	5f 4f       	sbci	r21, 0xFF	; 255

000007d6 <__divmodsi4_exit>:
 7d6:	08 95       	ret

000007d8 <__negsi2>:
 7d8:	90 95       	com	r25
 7da:	80 95       	com	r24
 7dc:	70 95       	com	r23
 7de:	61 95       	neg	r22
 7e0:	7f 4f       	sbci	r23, 0xFF	; 255
 7e2:	8f 4f       	sbci	r24, 0xFF	; 255
 7e4:	9f 4f       	sbci	r25, 0xFF	; 255
 7e6:	08 95       	ret

000007e8 <__muluhisi3>:
 7e8:	0e 94 29 04 	call	0x852	; 0x852 <__umulhisi3>
 7ec:	a5 9f       	mul	r26, r21
 7ee:	90 0d       	add	r25, r0
 7f0:	b4 9f       	mul	r27, r20
 7f2:	90 0d       	add	r25, r0
 7f4:	a4 9f       	mul	r26, r20
 7f6:	80 0d       	add	r24, r0
 7f8:	91 1d       	adc	r25, r1
 7fa:	11 24       	eor	r1, r1
 7fc:	08 95       	ret

000007fe <__mulshisi3>:
 7fe:	b7 ff       	sbrs	r27, 7
 800:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__muluhisi3>

00000804 <__mulohisi3>:
 804:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__muluhisi3>
 808:	82 1b       	sub	r24, r18
 80a:	93 0b       	sbc	r25, r19
 80c:	08 95       	ret

0000080e <__udivmodsi4>:
 80e:	a1 e2       	ldi	r26, 0x21	; 33
 810:	1a 2e       	mov	r1, r26
 812:	aa 1b       	sub	r26, r26
 814:	bb 1b       	sub	r27, r27
 816:	fd 01       	movw	r30, r26
 818:	0d c0       	rjmp	.+26     	; 0x834 <__udivmodsi4_ep>

0000081a <__udivmodsi4_loop>:
 81a:	aa 1f       	adc	r26, r26
 81c:	bb 1f       	adc	r27, r27
 81e:	ee 1f       	adc	r30, r30
 820:	ff 1f       	adc	r31, r31
 822:	a2 17       	cp	r26, r18
 824:	b3 07       	cpc	r27, r19
 826:	e4 07       	cpc	r30, r20
 828:	f5 07       	cpc	r31, r21
 82a:	20 f0       	brcs	.+8      	; 0x834 <__udivmodsi4_ep>
 82c:	a2 1b       	sub	r26, r18
 82e:	b3 0b       	sbc	r27, r19
 830:	e4 0b       	sbc	r30, r20
 832:	f5 0b       	sbc	r31, r21

00000834 <__udivmodsi4_ep>:
 834:	66 1f       	adc	r22, r22
 836:	77 1f       	adc	r23, r23
 838:	88 1f       	adc	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	1a 94       	dec	r1
 83e:	69 f7       	brne	.-38     	; 0x81a <__udivmodsi4_loop>
 840:	60 95       	com	r22
 842:	70 95       	com	r23
 844:	80 95       	com	r24
 846:	90 95       	com	r25
 848:	9b 01       	movw	r18, r22
 84a:	ac 01       	movw	r20, r24
 84c:	bd 01       	movw	r22, r26
 84e:	cf 01       	movw	r24, r30
 850:	08 95       	ret

00000852 <__umulhisi3>:
 852:	a2 9f       	mul	r26, r18
 854:	b0 01       	movw	r22, r0
 856:	b3 9f       	mul	r27, r19
 858:	c0 01       	movw	r24, r0
 85a:	a3 9f       	mul	r26, r19
 85c:	70 0d       	add	r23, r0
 85e:	81 1d       	adc	r24, r1
 860:	11 24       	eor	r1, r1
 862:	91 1d       	adc	r25, r1
 864:	b2 9f       	mul	r27, r18
 866:	70 0d       	add	r23, r0
 868:	81 1d       	adc	r24, r1
 86a:	11 24       	eor	r1, r1
 86c:	91 1d       	adc	r25, r1
 86e:	08 95       	ret

00000870 <_exit>:
 870:	f8 94       	cli

00000872 <__stop_program>:
 872:	ff cf       	rjmp	.-2      	; 0x872 <__stop_program>
