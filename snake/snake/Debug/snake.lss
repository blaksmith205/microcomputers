
snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000025c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bed  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000821  00000000  00000000  00000fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000527  00000000  00000000  000017ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041c  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000470  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  8e:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <spi_transfer>:
	// Clear all bits in the row in same transfer
	if (state == LOW)
		spi_transfer((8-row) << 8);
	// Set all bits in the row in same transfer
	else if (state == HIGH){
		spi_transfer(((8-row) << 8) | 0xFF);
  96:	2a 98       	cbi	0x05, 2	; 5
  98:	9e bd       	out	0x2e, r25	; 46
  9a:	0d b4       	in	r0, 0x2d	; 45
  9c:	07 fe       	sbrs	r0, 7
  9e:	fd cf       	rjmp	.-6      	; 0x9a <spi_transfer+0x4>
  a0:	8e bd       	out	0x2e, r24	; 46
  a2:	0d b4       	in	r0, 0x2d	; 45
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <spi_transfer+0xc>
  a8:	2a 9a       	sbi	0x05, 2	; 5
  aa:	89 ef       	ldi	r24, 0xF9	; 249
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <spi_transfer+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <spi_transfer+0x1e>
  b4:	00 00       	nop
  b6:	08 95       	ret

000000b8 <setIntensity>:
  b8:	80 31       	cpi	r24, 0x10	; 16
  ba:	20 f4       	brcc	.+8      	; 0xc4 <setIntensity+0xc>
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	9a 60       	ori	r25, 0x0A	; 10
  c0:	0e 94 4b 00 	call	0x96	; 0x96 <spi_transfer>
  c4:	08 95       	ret

000000c6 <setLED>:
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	88 30       	cpi	r24, 0x08	; 8
  d0:	80 f5       	brcc	.+96     	; 0x132 <setLED+0x6c>
  d2:	68 30       	cpi	r22, 0x08	; 8
  d4:	70 f5       	brcc	.+92     	; 0x132 <setLED+0x6c>
  d6:	c8 2f       	mov	r28, r24
  d8:	d0 e0       	ldi	r29, 0x00	; 0
  da:	fe 01       	movw	r30, r28
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	e0 50       	subi	r30, 0x00	; 0
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	00 81       	ld	r16, Z
  e6:	11 81       	ldd	r17, Z+1	; 0x01
  e8:	41 11       	cpse	r20, r1
  ea:	0f c0       	rjmp	.+30     	; 0x10a <setLED+0x44>
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <setLED+0x30>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <setLED+0x2c>
  fa:	80 95       	com	r24
  fc:	90 95       	com	r25
  fe:	08 23       	and	r16, r24
 100:	19 23       	and	r17, r25
 102:	c8 01       	movw	r24, r16
 104:	0e 94 4b 00 	call	0x96	; 0x96 <spi_transfer>
 108:	0e c0       	rjmp	.+28     	; 0x126 <setLED+0x60>
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	61 f4       	brne	.+24     	; 0x126 <setLED+0x60>
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <setLED+0x52>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <setLED+0x4e>
 11c:	08 2b       	or	r16, r24
 11e:	19 2b       	or	r17, r25
 120:	c8 01       	movw	r24, r16
 122:	0e 94 4b 00 	call	0x96	; 0x96 <spi_transfer>
 126:	cc 0f       	add	r28, r28
 128:	dd 1f       	adc	r29, r29
 12a:	c0 50       	subi	r28, 0x00	; 0
 12c:	df 4f       	sbci	r29, 0xFF	; 255
 12e:	19 83       	std	Y+1, r17	; 0x01
 130:	08 83       	st	Y, r16
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	08 95       	ret

0000013c <setCol>:
	}
}

void setCol(uint8_t col, uint8_t state)
{
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
	if (col < 0 || col > 7)
 144:	88 30       	cpi	r24, 0x08	; 8
 146:	c0 f4       	brcc	.+48     	; 0x178 <setCol+0x3c>
		return;
	
	uint8_t _col;
	if (state == LOW){
 148:	61 11       	cpse	r22, r1
 14a:	02 c0       	rjmp	.+4      	; 0x150 <setCol+0x14>
		CLR_BIT(_col, col);
 14c:	00 e0       	ldi	r16, 0x00	; 0
 14e:	07 c0       	rjmp	.+14     	; 0x15e <setCol+0x22>
	}
	else if (state == HIGH){
 150:	61 30       	cpi	r22, 0x01	; 1
 152:	91 f4       	brne	.+36     	; 0x178 <setCol+0x3c>
		SET_BIT(_col, col);
 154:	01 e0       	ldi	r16, 0x01	; 1
 156:	01 c0       	rjmp	.+2      	; 0x15a <setCol+0x1e>
 158:	00 0f       	add	r16, r16
 15a:	8a 95       	dec	r24
 15c:	ea f7       	brpl	.-6      	; 0x158 <setCol+0x1c>
	}
	else { 
		return;
	}
	
	for (uint16_t row = 0x0100; row <= 0x0800; row+=0x0100){
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d1 e0       	ldi	r29, 0x01	; 1
		spi_transfer(row | _col);
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	c8 01       	movw	r24, r16
 166:	8c 2b       	or	r24, r28
 168:	9d 2b       	or	r25, r29
 16a:	0e 94 4b 00 	call	0x96	; 0x96 <spi_transfer>
	}
	else { 
		return;
	}
	
	for (uint16_t row = 0x0100; row <= 0x0800; row+=0x0100){
 16e:	d3 95       	inc	r29
 170:	c1 15       	cp	r28, r1
 172:	89 e0       	ldi	r24, 0x09	; 9
 174:	d8 07       	cpc	r29, r24
 176:	b1 f7       	brne	.-20     	; 0x164 <setCol+0x28>
		spi_transfer(row | _col);
	}
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	08 95       	ret

00000182 <clearScreen>:

void clearScreen()
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
		// Clear all digits
		for(uint16_t data = 0x0100; data <=0x0800; data += 0x0100){
 186:	c0 e0       	ldi	r28, 0x00	; 0
 188:	d1 e0       	ldi	r29, 0x01	; 1
			spi_transfer(data);
 18a:	ce 01       	movw	r24, r28
 18c:	0e 94 4b 00 	call	0x96	; 0x96 <spi_transfer>
}

void clearScreen()
{
		// Clear all digits
		for(uint16_t data = 0x0100; data <=0x0800; data += 0x0100){
 190:	d3 95       	inc	r29
 192:	c1 15       	cp	r28, r1
 194:	89 e0       	ldi	r24, 0x09	; 9
 196:	d8 07       	cpc	r29, r24
 198:	c1 f7       	brne	.-16     	; 0x18a <clearScreen+0x8>
			spi_transfer(data);
		}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <spi_init>:
// Initialize the rows to zero
uint16_t ROWS[] = {0x0800, 0x0700, 0x0600, 0x0500, 0x0400, 0x0300, 0x0200, 0x0100};

void spi_init(volatile uint8_t *DDR, uint8_t MOSI, uint8_t CLK, uint8_t CS)
{
	*DDR = (1<<MOSI)|(1<<CLK)|(1<<CS);		//MOSI and SCK are output, CS to select matrix
 1a0:	e1 e0       	ldi	r30, 0x01	; 1
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	df 01       	movw	r26, r30
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <spi_init+0xc>
 1a8:	aa 0f       	add	r26, r26
 1aa:	bb 1f       	adc	r27, r27
 1ac:	4a 95       	dec	r20
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <spi_init+0x8>
 1b0:	ad 01       	movw	r20, r26
 1b2:	df 01       	movw	r26, r30
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <spi_init+0x1a>
 1b6:	aa 0f       	add	r26, r26
 1b8:	bb 1f       	adc	r27, r27
 1ba:	2a 95       	dec	r18
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <spi_init+0x16>
 1be:	9d 01       	movw	r18, r26
 1c0:	24 2b       	or	r18, r20
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <spi_init+0x28>
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <spi_init+0x24>
 1cc:	e2 2b       	or	r30, r18
 1ce:	dc 01       	movw	r26, r24
 1d0:	ec 93       	st	X, r30
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	//enable SPI as master
 1d2:	81 e5       	ldi	r24, 0x51	; 81
 1d4:	8c bd       	out	0x2c, r24	; 44
	
	spi_transfer(0x0900);			//disable decoding for all segments
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	99 e0       	ldi	r25, 0x09	; 9
 1da:	0e 94 4b 00 	call	0x96	; 0x96 <spi_transfer>
	spi_transfer(0x0B07);			//scan 8 8-segments
 1de:	87 e0       	ldi	r24, 0x07	; 7
 1e0:	9b e0       	ldi	r25, 0x0B	; 11
 1e2:	0e 94 4b 00 	call	0x96	; 0x96 <spi_transfer>
	
	clearScreen();
 1e6:	0e 94 c1 00 	call	0x182	; 0x182 <clearScreen>
	
	spi_transfer(0x0C01);			//turn on the matrix
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	9c e0       	ldi	r25, 0x0C	; 12
 1ee:	0e 94 4b 00 	call	0x96	; 0x96 <spi_transfer>
 1f2:	08 95       	ret

000001f4 <main>:
#include <util/delay.h>
#include "led_matrix.h"

int main(void)
{
    SET_BIT(PORTB, CS_PIN); // Don't select matrix until transmission
 1f4:	2a 9a       	sbi	0x05, 2	; 5
    spi_init(&DDRB, DIN_PIN, SCK_PIN, CS_PIN);	// Initialize serial output pins on PORTB
 1f6:	22 e0       	ldi	r18, 0x02	; 2
 1f8:	45 e0       	ldi	r20, 0x05	; 5
 1fa:	63 e0       	ldi	r22, 0x03	; 3
 1fc:	84 e2       	ldi	r24, 0x24	; 36
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <spi_init>
    setIntensity(15);
 204:	8f e0       	ldi	r24, 0x0F	; 15
 206:	0e 94 5c 00 	call	0xb8	; 0xb8 <setIntensity>
    
    // Set individual cells
    setLED(0,0, HIGH);
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 63 00 	call	0xc6	; 0xc6 <setLED>
    setLED(7,0, HIGH);
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	87 e0       	ldi	r24, 0x07	; 7
 21a:	0e 94 63 00 	call	0xc6	; 0xc6 <setLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	83 ed       	ldi	r24, 0xD3	; 211
 222:	90 e3       	ldi	r25, 0x30	; 48
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x30>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x3a>
 22e:	00 00       	nop
    _delay_ms(1000);
	setCol(0, LOW);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 9e 00 	call	0x13c	; 0x13c <setCol>
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	83 ed       	ldi	r24, 0xD3	; 211
 23c:	90 e3       	ldi	r25, 0x30	; 48
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x4a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x54>
 248:	00 00       	nop
	_delay_ms(1000);
	setCol(0, HIGH);
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 9e 00 	call	0x13c	; 0x13c <setCol>
    SET_BIT(DDRB, 0);	// Signal program is done
 252:	20 9a       	sbi	0x04, 0	; 4
    SET_BIT(PORTB, 0);
 254:	28 9a       	sbi	0x05, 0	; 5
 256:	ff cf       	rjmp	.-2      	; 0x256 <main+0x62>

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
