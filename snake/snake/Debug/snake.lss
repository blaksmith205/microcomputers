
snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000047c  00000510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800114  00800114  00000524  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000598  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e72  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000937  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000751  00000000  00000000  00001e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  0000257c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000498  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000545  00000000  00000000  00002b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003095  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  9e:	0c 94 3c 02 	jmp	0x478	; 0x478 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <spi_transfer>:
		return;
	}
	
	for (uint16_t row = 0x0100; row <= 0x0800; row+=0x0100){
		spi_transfer(row | _col);
	}
  a6:	2a 98       	cbi	0x05, 2	; 5
  a8:	9e bd       	out	0x2e, r25	; 46
  aa:	0d b4       	in	r0, 0x2d	; 45
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <spi_transfer+0x4>
  b0:	8e bd       	out	0x2e, r24	; 46
  b2:	0d b4       	in	r0, 0x2d	; 45
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <spi_transfer+0xc>
  b8:	2a 9a       	sbi	0x05, 2	; 5
  ba:	89 ef       	ldi	r24, 0xF9	; 249
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <spi_transfer+0x18>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <spi_transfer+0x1e>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <setIntensity>:
  c8:	80 31       	cpi	r24, 0x10	; 16
  ca:	20 f4       	brcc	.+8      	; 0xd4 <setIntensity+0xc>
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	9a 60       	ori	r25, 0x0A	; 10
  d0:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
  d4:	08 95       	ret

000000d6 <setLED>:
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	88 30       	cpi	r24, 0x08	; 8
  e0:	80 f5       	brcc	.+96     	; 0x142 <setLED+0x6c>
  e2:	68 30       	cpi	r22, 0x08	; 8
  e4:	70 f5       	brcc	.+92     	; 0x142 <setLED+0x6c>
  e6:	c8 2f       	mov	r28, r24
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	fe 01       	movw	r30, r28
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 5f       	subi	r30, 0xFC	; 252
  f2:	fe 4f       	sbci	r31, 0xFE	; 254
  f4:	00 81       	ld	r16, Z
  f6:	11 81       	ldd	r17, Z+1	; 0x01
  f8:	41 11       	cpse	r20, r1
  fa:	0f c0       	rjmp	.+30     	; 0x11a <setLED+0x44>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <setLED+0x30>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <setLED+0x2c>
 10a:	80 95       	com	r24
 10c:	90 95       	com	r25
 10e:	08 23       	and	r16, r24
 110:	19 23       	and	r17, r25
 112:	c8 01       	movw	r24, r16
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 118:	0e c0       	rjmp	.+28     	; 0x136 <setLED+0x60>
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	61 f4       	brne	.+24     	; 0x136 <setLED+0x60>
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <setLED+0x52>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <setLED+0x4e>
 12c:	08 2b       	or	r16, r24
 12e:	19 2b       	or	r17, r25
 130:	c8 01       	movw	r24, r16
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 136:	cc 0f       	add	r28, r28
 138:	dd 1f       	adc	r29, r29
 13a:	cc 5f       	subi	r28, 0xFC	; 252
 13c:	de 4f       	sbci	r29, 0xFE	; 254
 13e:	19 83       	std	Y+1, r17	; 0x01
 140:	08 83       	st	Y, r16
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	08 95       	ret

0000014c <clearScreen>:
}

void clearScreen()
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
{
		// Clear all digits
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	d1 e0       	ldi	r29, 0x01	; 1
		for(uint16_t data = 0x0100; data <=0x0800; data += 0x0100){
 154:	ce 01       	movw	r24, r28
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
	}
}

void clearScreen()
{
		// Clear all digits
 15a:	d3 95       	inc	r29
 15c:	c1 15       	cp	r28, r1
 15e:	89 e0       	ldi	r24, 0x09	; 9
 160:	d8 07       	cpc	r29, r24
 162:	c1 f7       	brne	.-16     	; 0x154 <clearScreen+0x8>
		for(uint16_t data = 0x0100; data <=0x0800; data += 0x0100){
			spi_transfer(data);
		}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <spi_init>:

// Initialize the rows to zero
uint16_t ROWS[] = {0x0800, 0x0700, 0x0600, 0x0500, 0x0400, 0x0300, 0x0200, 0x0100};

void spi_init(volatile uint8_t *DDR, uint8_t MOSI, uint8_t CLK, uint8_t CS)
{
 16a:	e1 e0       	ldi	r30, 0x01	; 1
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	df 01       	movw	r26, r30
 170:	02 c0       	rjmp	.+4      	; 0x176 <spi_init+0xc>
 172:	aa 0f       	add	r26, r26
 174:	bb 1f       	adc	r27, r27
 176:	4a 95       	dec	r20
 178:	e2 f7       	brpl	.-8      	; 0x172 <spi_init+0x8>
 17a:	ad 01       	movw	r20, r26
 17c:	df 01       	movw	r26, r30
 17e:	02 c0       	rjmp	.+4      	; 0x184 <spi_init+0x1a>
 180:	aa 0f       	add	r26, r26
 182:	bb 1f       	adc	r27, r27
 184:	2a 95       	dec	r18
 186:	e2 f7       	brpl	.-8      	; 0x180 <spi_init+0x16>
 188:	9d 01       	movw	r18, r26
 18a:	24 2b       	or	r18, r20
 18c:	02 c0       	rjmp	.+4      	; 0x192 <spi_init+0x28>
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <spi_init+0x24>
 196:	e2 2b       	or	r30, r18
 198:	dc 01       	movw	r26, r24
 19a:	ec 93       	st	X, r30
	*DDR = (1<<MOSI)|(1<<CLK)|(1<<CS);		//MOSI and SCK are output, CS to select matrix
 19c:	81 e5       	ldi	r24, 0x51	; 81
 19e:	8c bd       	out	0x2c, r24	; 44
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	//enable SPI as master
	
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	99 e0       	ldi	r25, 0x09	; 9
 1a4:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
	spi_transfer(0x0900);			//disable decoding for all segments
 1a8:	87 e0       	ldi	r24, 0x07	; 7
 1aa:	9b e0       	ldi	r25, 0x0B	; 11
 1ac:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
	spi_transfer(0x0B07);			//scan 8 8-segments
	
 1b0:	0e 94 a6 00 	call	0x14c	; 0x14c <clearScreen>
	clearScreen();
	
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	9c e0       	ldi	r25, 0x0C	; 12
 1b8:	0e 94 53 00 	call	0xa6	; 0xa6 <spi_transfer>
 1bc:	08 95       	ret

000001be <setup>:
}

void setup()
{
	// Setup matrix
	SET_BIT(PORTB, CS_PIN); // Don't select matrix until transmission
 1be:	2a 9a       	sbi	0x05, 2	; 5
	spi_init(&DDRB, DIN_PIN, SCK_PIN, CS_PIN);	// Initialize serial output pins on PORTB
 1c0:	22 e0       	ldi	r18, 0x02	; 2
 1c2:	45 e0       	ldi	r20, 0x05	; 5
 1c4:	63 e0       	ldi	r22, 0x03	; 3
 1c6:	84 e2       	ldi	r24, 0x24	; 36
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 b5 00 	call	0x16a	; 0x16a <spi_init>
	setIntensity(15);
 1ce:	8f e0       	ldi	r24, 0x0F	; 15
 1d0:	0e 94 64 00 	call	0xc8	; 0xc8 <setIntensity>
	
	// Setup random generator
	random_init();
 1d4:	0e 94 2c 01 	call	0x258	; 0x258 <random_init>
	
	// Place the first food
	placeFood();
 1d8:	0e 94 0b 01 	call	0x216	; 0x216 <placeFood>
 1dc:	08 95       	ret

000001de <main>:

void setup();

int main(void)
{
    setup();
 1de:	0e 94 df 00 	call	0x1be	; 0x1be <setup>
    SET_BIT(DDRB, 0);	// Signal program is done
 1e2:	20 9a       	sbi	0x04, 0	; 4
    SET_BIT(PORTB, 0);
 1e4:	28 9a       	sbi	0x05, 0	; 5
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <main+0x8>

000001e8 <updateBoard>:
	uint8_t food_col = rand() % BOARD_WIDTH;
	updateBoard(food_row, food_col, HIGH);
}

void updateBoard(uint8_t row, uint8_t col, uint8_t value){
	board[row][col] = value;
 1e8:	e8 2f       	mov	r30, r24
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	ee 0f       	add	r30, r30
 1ee:	ff 1f       	adc	r31, r31
 1f0:	ee 0f       	add	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	ec 5e       	subi	r30, 0xEC	; 236
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	e6 0f       	add	r30, r22
 1fe:	f1 1d       	adc	r31, r1
 200:	40 83       	st	Z, r20
	if (value != LOW){
 202:	44 23       	and	r20, r20
 204:	21 f0       	breq	.+8      	; 0x20e <updateBoard+0x26>
		setLED(row, col, HIGH);
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	0e 94 6b 00 	call	0xd6	; 0xd6 <setLED>
 20c:	08 95       	ret
	}
	else {
		setLED(row, col, LOW);
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	0e 94 6b 00 	call	0xd6	; 0xd6 <setLED>
 214:	08 95       	ret

00000216 <placeFood>:

// Global board matrix for location of elements
uint8_t board[BOARD_WIDTH][BOARD_WIDTH];

void placeFood()
{
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
	uint8_t food_row = rand() % BOARD_WIDTH;
 21a:	0e 94 b3 01 	call	0x366	; 0x366 <rand>
 21e:	ec 01       	movw	r28, r24
	uint8_t food_col = rand() % BOARD_WIDTH;
 220:	0e 94 b3 01 	call	0x366	; 0x366 <rand>
	updateBoard(food_row, food_col, HIGH);
 224:	bc 01       	movw	r22, r24
 226:	67 70       	andi	r22, 0x07	; 7
 228:	70 78       	andi	r23, 0x80	; 128
 22a:	77 23       	and	r23, r23
 22c:	34 f4       	brge	.+12     	; 0x23a <placeFood+0x24>
 22e:	61 50       	subi	r22, 0x01	; 1
 230:	71 09       	sbc	r23, r1
 232:	68 6f       	ori	r22, 0xF8	; 248
 234:	7f 6f       	ori	r23, 0xFF	; 255
 236:	6f 5f       	subi	r22, 0xFF	; 255
 238:	7f 4f       	sbci	r23, 0xFF	; 255
 23a:	ce 01       	movw	r24, r28
 23c:	87 70       	andi	r24, 0x07	; 7
 23e:	90 78       	andi	r25, 0x80	; 128
 240:	99 23       	and	r25, r25
 242:	24 f4       	brge	.+8      	; 0x24c <placeFood+0x36>
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	88 6f       	ori	r24, 0xF8	; 248
 248:	9f 6f       	ori	r25, 0xFF	; 255
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <updateBoard>
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <random_init>:
}

void random_init()
{
	// Obtain value from EEPROM
	uint8_t seed = eeprom_read_byte((uint8_t*)0x66); 
 258:	86 e6       	ldi	r24, 0x66	; 102
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 c3 01 	call	0x386	; 0x386 <eeprom_read_byte>
	// Set the random seed
	srand(seed);
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 b8 01 	call	0x370	; 0x370 <srand>
	// Obtain random char value
	seed = rand() % 255;
 266:	0e 94 b3 01 	call	0x366	; 0x366 <rand>
	// Store seed for future use
	eeprom_write_byte((uint8_t*)0x66, seed);
 26a:	6f ef       	ldi	r22, 0xFF	; 255
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	0e 94 3f 01 	call	0x27e	; 0x27e <__divmodhi4>
 272:	68 2f       	mov	r22, r24
 274:	86 e6       	ldi	r24, 0x66	; 102
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 cb 01 	call	0x396	; 0x396 <eeprom_write_byte>
 27c:	08 95       	ret

0000027e <__divmodhi4>:
 27e:	97 fb       	bst	r25, 7
 280:	07 2e       	mov	r0, r23
 282:	16 f4       	brtc	.+4      	; 0x288 <__divmodhi4+0xa>
 284:	00 94       	com	r0
 286:	07 d0       	rcall	.+14     	; 0x296 <__divmodhi4_neg1>
 288:	77 fd       	sbrc	r23, 7
 28a:	09 d0       	rcall	.+18     	; 0x29e <__divmodhi4_neg2>
 28c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__udivmodhi4>
 290:	07 fc       	sbrc	r0, 7
 292:	05 d0       	rcall	.+10     	; 0x29e <__divmodhi4_neg2>
 294:	3e f4       	brtc	.+14     	; 0x2a4 <__divmodhi4_exit>

00000296 <__divmodhi4_neg1>:
 296:	90 95       	com	r25
 298:	81 95       	neg	r24
 29a:	9f 4f       	sbci	r25, 0xFF	; 255
 29c:	08 95       	ret

0000029e <__divmodhi4_neg2>:
 29e:	70 95       	com	r23
 2a0:	61 95       	neg	r22
 2a2:	7f 4f       	sbci	r23, 0xFF	; 255

000002a4 <__divmodhi4_exit>:
 2a4:	08 95       	ret

000002a6 <__udivmodhi4>:
 2a6:	aa 1b       	sub	r26, r26
 2a8:	bb 1b       	sub	r27, r27
 2aa:	51 e1       	ldi	r21, 0x11	; 17
 2ac:	07 c0       	rjmp	.+14     	; 0x2bc <__udivmodhi4_ep>

000002ae <__udivmodhi4_loop>:
 2ae:	aa 1f       	adc	r26, r26
 2b0:	bb 1f       	adc	r27, r27
 2b2:	a6 17       	cp	r26, r22
 2b4:	b7 07       	cpc	r27, r23
 2b6:	10 f0       	brcs	.+4      	; 0x2bc <__udivmodhi4_ep>
 2b8:	a6 1b       	sub	r26, r22
 2ba:	b7 0b       	sbc	r27, r23

000002bc <__udivmodhi4_ep>:
 2bc:	88 1f       	adc	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	5a 95       	dec	r21
 2c2:	a9 f7       	brne	.-22     	; 0x2ae <__udivmodhi4_loop>
 2c4:	80 95       	com	r24
 2c6:	90 95       	com	r25
 2c8:	bc 01       	movw	r22, r24
 2ca:	cd 01       	movw	r24, r26
 2cc:	08 95       	ret

000002ce <do_rand>:
 2ce:	8f 92       	push	r8
 2d0:	9f 92       	push	r9
 2d2:	af 92       	push	r10
 2d4:	bf 92       	push	r11
 2d6:	cf 92       	push	r12
 2d8:	df 92       	push	r13
 2da:	ef 92       	push	r14
 2dc:	ff 92       	push	r15
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	ec 01       	movw	r28, r24
 2e4:	68 81       	ld	r22, Y
 2e6:	79 81       	ldd	r23, Y+1	; 0x01
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	9b 81       	ldd	r25, Y+3	; 0x03
 2ec:	61 15       	cp	r22, r1
 2ee:	71 05       	cpc	r23, r1
 2f0:	81 05       	cpc	r24, r1
 2f2:	91 05       	cpc	r25, r1
 2f4:	21 f4       	brne	.+8      	; 0x2fe <do_rand+0x30>
 2f6:	64 e2       	ldi	r22, 0x24	; 36
 2f8:	79 ed       	ldi	r23, 0xD9	; 217
 2fa:	8b e5       	ldi	r24, 0x5B	; 91
 2fc:	97 e0       	ldi	r25, 0x07	; 7
 2fe:	2d e1       	ldi	r18, 0x1D	; 29
 300:	33 ef       	ldi	r19, 0xF3	; 243
 302:	41 e0       	ldi	r20, 0x01	; 1
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__divmodsi4>
 30a:	49 01       	movw	r8, r18
 30c:	5a 01       	movw	r10, r20
 30e:	9b 01       	movw	r18, r22
 310:	ac 01       	movw	r20, r24
 312:	a7 ea       	ldi	r26, 0xA7	; 167
 314:	b1 e4       	ldi	r27, 0x41	; 65
 316:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__muluhisi3>
 31a:	6b 01       	movw	r12, r22
 31c:	7c 01       	movw	r14, r24
 31e:	ac ee       	ldi	r26, 0xEC	; 236
 320:	b4 ef       	ldi	r27, 0xF4	; 244
 322:	a5 01       	movw	r20, r10
 324:	94 01       	movw	r18, r8
 326:	0e 94 06 02 	call	0x40c	; 0x40c <__mulohisi3>
 32a:	dc 01       	movw	r26, r24
 32c:	cb 01       	movw	r24, r22
 32e:	8c 0d       	add	r24, r12
 330:	9d 1d       	adc	r25, r13
 332:	ae 1d       	adc	r26, r14
 334:	bf 1d       	adc	r27, r15
 336:	b7 ff       	sbrs	r27, 7
 338:	03 c0       	rjmp	.+6      	; 0x340 <do_rand+0x72>
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	a1 09       	sbc	r26, r1
 33e:	b0 48       	sbci	r27, 0x80	; 128
 340:	88 83       	st	Y, r24
 342:	99 83       	std	Y+1, r25	; 0x01
 344:	aa 83       	std	Y+2, r26	; 0x02
 346:	bb 83       	std	Y+3, r27	; 0x03
 348:	9f 77       	andi	r25, 0x7F	; 127
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	ff 90       	pop	r15
 350:	ef 90       	pop	r14
 352:	df 90       	pop	r13
 354:	cf 90       	pop	r12
 356:	bf 90       	pop	r11
 358:	af 90       	pop	r10
 35a:	9f 90       	pop	r9
 35c:	8f 90       	pop	r8
 35e:	08 95       	ret

00000360 <rand_r>:
 360:	0e 94 67 01 	call	0x2ce	; 0x2ce <do_rand>
 364:	08 95       	ret

00000366 <rand>:
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	0e 94 67 01 	call	0x2ce	; 0x2ce <do_rand>
 36e:	08 95       	ret

00000370 <srand>:
 370:	a0 e0       	ldi	r26, 0x00	; 0
 372:	b0 e0       	ldi	r27, 0x00	; 0
 374:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 378:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 37c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 380:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 384:	08 95       	ret

00000386 <eeprom_read_byte>:
 386:	f9 99       	sbic	0x1f, 1	; 31
 388:	fe cf       	rjmp	.-4      	; 0x386 <eeprom_read_byte>
 38a:	92 bd       	out	0x22, r25	; 34
 38c:	81 bd       	out	0x21, r24	; 33
 38e:	f8 9a       	sbi	0x1f, 0	; 31
 390:	99 27       	eor	r25, r25
 392:	80 b5       	in	r24, 0x20	; 32
 394:	08 95       	ret

00000396 <eeprom_write_byte>:
 396:	26 2f       	mov	r18, r22

00000398 <eeprom_write_r18>:
 398:	f9 99       	sbic	0x1f, 1	; 31
 39a:	fe cf       	rjmp	.-4      	; 0x398 <eeprom_write_r18>
 39c:	1f ba       	out	0x1f, r1	; 31
 39e:	92 bd       	out	0x22, r25	; 34
 3a0:	81 bd       	out	0x21, r24	; 33
 3a2:	20 bd       	out	0x20, r18	; 32
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	f8 94       	cli
 3a8:	fa 9a       	sbi	0x1f, 2	; 31
 3aa:	f9 9a       	sbi	0x1f, 1	; 31
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	08 95       	ret

000003b2 <__divmodsi4>:
 3b2:	05 2e       	mov	r0, r21
 3b4:	97 fb       	bst	r25, 7
 3b6:	1e f4       	brtc	.+6      	; 0x3be <__divmodsi4+0xc>
 3b8:	00 94       	com	r0
 3ba:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__negsi2>
 3be:	57 fd       	sbrc	r21, 7
 3c0:	07 d0       	rcall	.+14     	; 0x3d0 <__divmodsi4_neg2>
 3c2:	0e 94 0b 02 	call	0x416	; 0x416 <__udivmodsi4>
 3c6:	07 fc       	sbrc	r0, 7
 3c8:	03 d0       	rcall	.+6      	; 0x3d0 <__divmodsi4_neg2>
 3ca:	4e f4       	brtc	.+18     	; 0x3de <__divmodsi4_exit>
 3cc:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__negsi2>

000003d0 <__divmodsi4_neg2>:
 3d0:	50 95       	com	r21
 3d2:	40 95       	com	r20
 3d4:	30 95       	com	r19
 3d6:	21 95       	neg	r18
 3d8:	3f 4f       	sbci	r19, 0xFF	; 255
 3da:	4f 4f       	sbci	r20, 0xFF	; 255
 3dc:	5f 4f       	sbci	r21, 0xFF	; 255

000003de <__divmodsi4_exit>:
 3de:	08 95       	ret

000003e0 <__negsi2>:
 3e0:	90 95       	com	r25
 3e2:	80 95       	com	r24
 3e4:	70 95       	com	r23
 3e6:	61 95       	neg	r22
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	8f 4f       	sbci	r24, 0xFF	; 255
 3ec:	9f 4f       	sbci	r25, 0xFF	; 255
 3ee:	08 95       	ret

000003f0 <__muluhisi3>:
 3f0:	0e 94 2d 02 	call	0x45a	; 0x45a <__umulhisi3>
 3f4:	a5 9f       	mul	r26, r21
 3f6:	90 0d       	add	r25, r0
 3f8:	b4 9f       	mul	r27, r20
 3fa:	90 0d       	add	r25, r0
 3fc:	a4 9f       	mul	r26, r20
 3fe:	80 0d       	add	r24, r0
 400:	91 1d       	adc	r25, r1
 402:	11 24       	eor	r1, r1
 404:	08 95       	ret

00000406 <__mulshisi3>:
 406:	b7 ff       	sbrs	r27, 7
 408:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__muluhisi3>

0000040c <__mulohisi3>:
 40c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__muluhisi3>
 410:	82 1b       	sub	r24, r18
 412:	93 0b       	sbc	r25, r19
 414:	08 95       	ret

00000416 <__udivmodsi4>:
 416:	a1 e2       	ldi	r26, 0x21	; 33
 418:	1a 2e       	mov	r1, r26
 41a:	aa 1b       	sub	r26, r26
 41c:	bb 1b       	sub	r27, r27
 41e:	fd 01       	movw	r30, r26
 420:	0d c0       	rjmp	.+26     	; 0x43c <__udivmodsi4_ep>

00000422 <__udivmodsi4_loop>:
 422:	aa 1f       	adc	r26, r26
 424:	bb 1f       	adc	r27, r27
 426:	ee 1f       	adc	r30, r30
 428:	ff 1f       	adc	r31, r31
 42a:	a2 17       	cp	r26, r18
 42c:	b3 07       	cpc	r27, r19
 42e:	e4 07       	cpc	r30, r20
 430:	f5 07       	cpc	r31, r21
 432:	20 f0       	brcs	.+8      	; 0x43c <__udivmodsi4_ep>
 434:	a2 1b       	sub	r26, r18
 436:	b3 0b       	sbc	r27, r19
 438:	e4 0b       	sbc	r30, r20
 43a:	f5 0b       	sbc	r31, r21

0000043c <__udivmodsi4_ep>:
 43c:	66 1f       	adc	r22, r22
 43e:	77 1f       	adc	r23, r23
 440:	88 1f       	adc	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	1a 94       	dec	r1
 446:	69 f7       	brne	.-38     	; 0x422 <__udivmodsi4_loop>
 448:	60 95       	com	r22
 44a:	70 95       	com	r23
 44c:	80 95       	com	r24
 44e:	90 95       	com	r25
 450:	9b 01       	movw	r18, r22
 452:	ac 01       	movw	r20, r24
 454:	bd 01       	movw	r22, r26
 456:	cf 01       	movw	r24, r30
 458:	08 95       	ret

0000045a <__umulhisi3>:
 45a:	a2 9f       	mul	r26, r18
 45c:	b0 01       	movw	r22, r0
 45e:	b3 9f       	mul	r27, r19
 460:	c0 01       	movw	r24, r0
 462:	a3 9f       	mul	r26, r19
 464:	70 0d       	add	r23, r0
 466:	81 1d       	adc	r24, r1
 468:	11 24       	eor	r1, r1
 46a:	91 1d       	adc	r25, r1
 46c:	b2 9f       	mul	r27, r18
 46e:	70 0d       	add	r23, r0
 470:	81 1d       	adc	r24, r1
 472:	11 24       	eor	r1, r1
 474:	91 1d       	adc	r25, r1
 476:	08 95       	ret

00000478 <_exit>:
 478:	f8 94       	cli

0000047a <__stop_program>:
 47a:	ff cf       	rjmp	.-2      	; 0x47a <__stop_program>
